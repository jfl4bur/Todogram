import { execSync } from 'child_process';
import fs from 'fs';
import readline from 'readline/promises';
import { stdin as input, stdout as output } from 'process';

const DATA_FILE = 'public/data.json';
const CHECK_INTERVAL = 5000;
let isProcessing = false;
let stats = { 
  pushes: 0, 
  commits: 0, 
  pulls: 0, 
  conflictos: 0, 
  errores: 0,
  warnings: 0,
  sesionInicio: new Date(),
  ultimoCommit: null,
  ultimoPush: null,
  ultimoPull: null
};
let exitListenerAttached = false;

const color = {
  reset: "\x1b[0m",
  blue: "\x1b[34m",
  green: "\x1b[32m",
  red: "\x1b[31m",
  yellow: "\x1b[33m",
  cyan: "\x1b[36m",
  bright: "\x1b[1m",
  magenta: "\x1b[35m",
  gray: "\x1b[90m",
  white: "\x1b[37m"
};

function drawBox(title, content = [], addSpacing = true) {
  const width = 80;
  const border = '‚ïê'.repeat(width - 2);
  const lines = [
    `‚ïî${border}‚ïó`,
    `‚ïë ${title.padEnd(width - 4)} ‚ïë`,
    `‚ï†${border}‚ï£`,
    ...content.map(line => `‚ïë ${line.padEnd(width - 4)} ‚ïë`),
    `‚ïö${border}‚ïù`
  ];
  
  if (addSpacing) console.log('\n' + lines.join('\n') + '\n\n\n');
  else console.log('\n' + lines.join('\n'));
}

function showAsciiLogo() {
  drawBox('üî• SISTEMA DE GESTI√ìN TODOGRAM', [
    `${color.cyan}   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó     ${color.reset}`,
    `${color.cyan}   ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë     ${color.reset}`,
    `${color.cyan}      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë     ${color.reset}`,
    `${color.cyan}      ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ${color.reset}`,
    `${color.cyan}      ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë     ${color.reset}`,
    `${color.cyan}      ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù     ${color.reset}`
  ]);
}

function exec(cmd, silent = false) {
  try {
    const output = execSync(cmd, { stdio: silent ? 'pipe' : 'inherit' });
    return { success: true, output: output?.toString().trim() || '' };
  } catch (err) {
    stats.errores++;
    return { 
      success: false, 
      output: err.stdout?.toString().trim() || err.message,
      stderr: err.stderr?.toString().trim() || ''
    };
  }
}

function createProgressBar(percentage) {
  const len = 20;
  const filled = Math.floor((percentage / 100) * len);
  return `${color.blue}üöÄ Subiendo |${'‚ñà'.repeat(filled)}${' '.repeat(len - filled)}| ${percentage}%${color.reset}`;
}

function formatDuration(ms) {
  const seconds = Math.floor(ms / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  
  if (hours > 0) return `${hours}h ${minutes % 60}m ${seconds % 60}s`;
  if (minutes > 0) return `${minutes}m ${seconds % 60}s`;
  return `${seconds}s`;
}

async function promptCountdown() {
  const width = 80;
  const border = '‚ïê'.repeat(width - 2);
  
  console.log(`\n‚ïî${border}‚ïó`);
  console.log(`‚ïë ¬øDeseas continuar escuchando o salir?                                        ‚ïë`);
  console.log(`‚ï†${border}‚ï£`);
  console.log(`‚ïë [S]eguir escuchando  |  [N] Salir  |  Cualquier tecla para continuar esperando ‚ïë`);
  console.log(`‚ïö${border}‚ïù`);
  
  let countdown = 60;
  let resolved = false;

  process.stdin.setRawMode(true);
  process.stdin.resume();
  process.stdin.setEncoding('utf8');

  const interval = setInterval(() => {
    process.stdout.write(`\n‚è≥ ${color.cyan}Continuando en ${countdown}s... Presiona S/N/Esc para decidir${color.reset} `);
    if (--countdown < 0 && !resolved) {
      clearInterval(interval);
      process.stdin.setRawMode(false);
      process.stdin.pause();
      
      drawBox('‚è±Ô∏è  Tiempo agotado', ['üü¢  Continuando en modo escucha.']);
      resolved = true;
    }
  }, 1000);

  return new Promise((resolve) => {
    process.stdin.on('data', (key) => {
      if (resolved) return;
      clearInterval(interval);
      process.stdin.setRawMode(false);
      process.stdin.pause();
      
      // Limpiar la l√≠nea del countdown
      process.stdout.write('\r' + ' '.repeat(80) + '\r');
      
      if (key === '\u0003' || key.toLowerCase() === 'n' || key === '\x1B') {
        drawBox('üõë Cerrando el script por decisi√≥n del usuario.');
        process.exit(0);
      } else if (key.toLowerCase() === 's') {
        drawBox('‚è±Ô∏è  Elecci√≥n de usuario', ['üü¢  Continuando en modo escucha.']);
      } else {
        drawBox('‚è±Ô∏è  Elecci√≥n de usuario', ['üü¢  Continuando en modo escucha.']);
      }
      
      resolve();
      resolved = true;
    });
  });
}

function showStats() {
  const duracion = formatDuration(Date.now() - stats.sesionInicio.getTime());
  const eficiencia = stats.commits > 0 ? Math.round((stats.pushes / stats.commits) * 100) : 0;
  
  drawBox('üìä RESUMEN DETALLADO DE ESTAD√çSTICAS', [
    `${color.bright}üïê Sesi√≥n iniciada     :${color.reset} ${stats.sesionInicio.toLocaleString()}`,
    `${color.bright}‚è±Ô∏è  Duraci√≥n total     :${color.reset} ${duracion}`,
    `${color.bright}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${color.reset}`,
    `${color.green}‚úÖ Commits realizados  :${color.reset} ${stats.commits}`,
    `${color.blue}üì§ Pushes exitosos     :${color.reset} ${stats.pushes}`,
    `${color.cyan}üì• Pulls realizados    :${color.reset} ${stats.pulls}`,
    `${color.yellow}‚ö†Ô∏è  Warnings detectados:${color.reset} ${stats.warnings}`,
    `${color.magenta}üîÄ Conflictos          :${color.reset} ${stats.conflictos}`,
    `${color.red}‚ùå Errores detectados  :${color.reset} ${stats.errores}`,
    `${color.bright}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${color.reset}`,
    `${color.white}üìà Eficiencia de Push  :${color.reset} ${eficiencia}%`,
    stats.ultimoCommit ? `${color.gray}üïí √öltimo commit       :${color.reset} ${stats.ultimoCommit}` : '',
    stats.ultimoPush ? `${color.gray}üïí √öltimo push         :${color.reset} ${stats.ultimoPush}` : '',
    stats.ultimoPull ? `${color.gray}üïí √öltimo pull         :${color.reset} ${stats.ultimoPull}` : ''
  ].filter(line => line !== ''), false);
}

function colorizeGitOutput(line) {
  const trimmed = line.trim();
  const lower = trimmed.toLowerCase();
  
  if (lower.includes('warning:') || lower.includes('warn')) {
    stats.warnings++;
    return `${color.yellow}‚ö†Ô∏è  ${trimmed}${color.reset}`;
  } else if (lower.includes('error:') || lower.includes('failed:') || lower.includes('aborting') || lower.includes('fatal:')) {
    return `${color.red}‚ùå ${trimmed}${color.reset}`;
  } else if (lower.includes('conflict') || lower.includes('merge conflict')) {
    return `${color.magenta}üîÄ ${trimmed}${color.reset}`;
  } else if (lower.includes('success') || lower.includes('done') || lower.includes('ok')) {
    return `${color.green}‚úÖ ${trimmed}${color.reset}`;
  } else if (lower.includes('up-to-date') || lower.includes('already up to date')) {
    return `${color.cyan}‚ÑπÔ∏è  ${trimmed}${color.reset}`;
  }
  return `${color.gray}üìã ${trimmed}${color.reset}`;
}

function logProcessStep(step, details = []) {
  const width = 80;
  console.log(`‚ïë ${step.padEnd(width - 4)} ‚ïë`);
  if (details.length > 0) {
    console.log(`‚ïë ${'‚îÄ'.repeat(width - 4)} ‚ïë`);
    details.forEach(detail => {
      const coloredDetail = colorizeGitOutput(detail);
      // Truncar l√≠neas muy largas
      const truncated = coloredDetail.length > 72 ? coloredDetail.substring(0, 69) + '...' : coloredDetail;
      console.log(`‚ïë ${truncated.padEnd(width - 4)} ‚ïë`);
    });
    console.log(`‚ïë ${'‚îÄ'.repeat(width - 4)} ‚ïë`);
  }
}

async function autoPush() {
  if (isProcessing) return;
  const statusResult = exec('git status --porcelain', true);
  if (!statusResult.output.includes('data.json')) return;
  isProcessing = true;

  const time = new Date().toLocaleTimeString();
  const title = `üîÑ Cambio detectado en data.json [${time}]`;
  
  // Mostrar caja inicial
  const width = 80;
  const border = '‚ïê'.repeat(width - 2);
  console.log(`\n‚ïî${border}‚ïó`);
  console.log(`‚ïë ${title.padEnd(width - 4)} ‚ïë`);
  console.log(`‚ï†${border}‚ï£`);
  
  // Proceso de Add
  logProcessStep('‚ûï A√±adiendo archivos...');
  const addResult = exec('git add public/data.json', true);
  if (addResult.output) {
    logProcessStep('', addResult.output.split('\n').filter(line => line.trim()));
  }
  
  // Proceso de Commit
  logProcessStep('üíæ Creando commit...');
  const commitResult = exec(`git commit -m "Auto push [${new Date().toISOString()}]"`, true);
  if (commitResult.output.includes('nothing to commit')) {
    logProcessStep('‚ö†Ô∏è  Nada que commitear.');
    console.log(`‚ïö${border}‚ïù`);
    isProcessing = false;
    return;
  }
  
  if (commitResult.output) {
    logProcessStep('', commitResult.output.split('\n').filter(line => line.trim()));
  }
  stats.commits++;
  stats.ultimoCommit = new Date().toLocaleString();

  // Proceso de Pull
  logProcessStep('üì• Ejecutando Pull...');
  const pullResult = exec('git pull', true);
  
  if (pullResult.output) {
    logProcessStep('', pullResult.output.split('\n').filter(line => line.trim()));
  }
  
  if (pullResult.stderr) {
    logProcessStep('', pullResult.stderr.split('\n').filter(line => line.trim()));
  }
  
  if (!pullResult.success || pullResult.output.includes('error') || pullResult.output.includes('conflict')) {
    logProcessStep(`${color.red}‚ùå Error en pull detectado${color.reset}`);
    console.log(`‚ïö${border}‚ïù`);
    stats.conflictos++;
    isProcessing = false;
    return;
  }
  stats.pulls++;
  stats.ultimoPull = new Date().toLocaleString();

  // Proceso de Push
  logProcessStep('üì§ Ejecutando Push...');
  
  // Mostrar progreso
  for (let i = 0; i <= 100; i += 25) {
    const progressLine = createProgressBar(i);
    console.log(`‚ïë ${progressLine.padEnd(90)} ‚ïë`);
    if (i < 100) {
      process.stdout.write('\x1B[1A');
    }
    await new Promise(resolve => setTimeout(resolve, 300));
  }
  
  try {
    const pushResult = exec('git push', true);
    
    // Mostrar detalles del push
    if (pushResult.output) {
      logProcessStep('', pushResult.output.split('\n').filter(line => line.trim()));
    }
    
    if (pushResult.stderr) {
      logProcessStep('', pushResult.stderr.split('\n').filter(line => line.trim()));
    }
    
    // Verificar resultado
    if (!pushResult.success || pushResult.output.includes('rejected') || pushResult.output.includes('error')) {
      logProcessStep(`${color.red}‚ùå Push fall√≥ - revisar conflictos${color.reset}`);
      stats.errores++;
    } else {
      logProcessStep(`${color.green}‚úÖ Push completado exitosamente${color.reset}`);
      stats.pushes++;
      stats.ultimoPush = new Date().toLocaleString();
    }
    
    console.log(`‚ïë ${' '.repeat(width - 4)} ‚ïë`);
    console.log(`‚ïö${border}‚ïù`);
    
    showStats();
    await promptCountdown();
    
  } catch (e) {
    logProcessStep(`${color.red}‚ùå Excepci√≥n durante push${color.reset}`);
    if (e.message) {
      logProcessStep('', e.message.split('\n').filter(line => line.trim()));
    }
    console.log(`‚ïö${border}‚ïù`);
    stats.errores++;
  }
  isProcessing = false;
}

async function startWatcher() {
  drawBox('üöÄ Git Auto-Push Iniciado', [
    `${color.cyan}üìÇ Vigilando archivo   :${color.reset} ${DATA_FILE}`,
    `${color.cyan}‚è∞ Intervalo de chequeo:${color.reset} ${CHECK_INTERVAL / 1000} segundos`,
    `${color.cyan}üîÑ Modo autom√°tico     :${color.reset} add/commit/pull/push`,
    `${color.cyan}‚å®Ô∏è  Control manual     :${color.reset} Presiona [x] o [ESC] para salir`,
    `${color.gray}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${color.reset}`,
    `${color.green}‚úÖ Sistema iniciado correctamente${color.reset}`
  ]);
  
  if (!fs.existsSync(DATA_FILE)) {
    drawBox('‚ö†Ô∏è Advertencia', [
      `${color.yellow}El archivo ${DATA_FILE} no existe.${color.reset}`,
      `${color.yellow}Se monitorear√° cuando sea creado.${color.reset}`
    ]);
  }

  if (!exitListenerAttached) {
    process.stdin.setRawMode(true);
    process.stdin.resume();
    process.stdin.setEncoding('utf8');
    process.stdin.on('data', (key) => {
      if (key.toLowerCase() === 'x' || key === '\x1B') {
        drawBox('üõë Finalizando script por orden del usuario.');
        showStats();
        process.exit(0);
      }
    });
    exitListenerAttached = true;
  }

  setInterval(() => autoPush(), CHECK_INTERVAL);
}

process.on('SIGINT', () => {
  drawBox('üõë Interrupci√≥n manual (Ctrl+C)');
  showStats();
  process.exit(0);
});

process.on('SIGTERM', () => {
  drawBox('üõë Terminaci√≥n del sistema');
  showStats();
  process.exit(0);
});

startWatcher().catch(console.error);