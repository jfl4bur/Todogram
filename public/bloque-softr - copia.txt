<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CinePlus - Carrusel de Películas</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #ff003c;
            --secondary-color: #2a2a2a;
            --text-color: #ffffff;
            --text-secondary: #cccccc;
            --bg-color: #141414;
            --hover-brightness: 1.2;
            --item-width: 194px;
            --item-height: 271px;
            --modal-scale: 1.7;
        }

        /* Estilos personalizados para los scrollbars */
        .details-modal-overlay::-webkit-scrollbar {
            width: 6px;
        }

        .details-modal-overlay::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
        }

        .details-modal-overlay::-webkit-scrollbar-thumb {
            background-color: var(--primary-color);
            border-radius: 3px;
        }

        .details-modal-cast-list::-webkit-scrollbar,
        .details-modal-gallery-list::-webkit-scrollbar {
            height: 4px;
        }

        .details-modal-cast-list::-webkit-scrollbar-track,
        .details-modal-gallery-list::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 2px;
        }

        .details-modal-cast-list::-webkit-scrollbar-thumb,
        .details-modal-gallery-list::-webkit-scrollbar-thumb {
            background-color: var(--primary-color);
            border-radius: 2px;
        }

        /* Resto de tus estilos existentes... */
        .carousel-section {
            margin-bottom: 40px;
            position: relative;
        }

        .carousel-title {
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 15px;
            padding-left: 5px;
            color: var(--text-color);
        }

        #carousel-wrapper {
            display: flex;
            overflow-x: auto;
            scroll-behavior: smooth;
            scrollbar-width: none;
            -ms-overflow-style: none;
            padding-bottom: 10px;
            padding-top: 4px;
            gap: 4px;
        }

        #carousel-wrapper::-webkit-scrollbar {
            display: none;
        }

        /* Skeleton loader con spinner circular */
        .carousel-skeleton {
            display: flex;
            gap: 4px;
            width: 100%;
            overflow-x: auto;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

        .carousel-skeleton::-webkit-scrollbar {
            display: none;
        }

        .skeleton-item {
            flex: 0 0 auto;
            width: var(--item-width);
            height: var(--item-height);
            background-color: var(--secondary-color);
            position: relative;
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            border-radius: 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .skeleton-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            border-top-color: var(--primary-color);
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        .custom-carousel-item {
            flex: 0 0 auto;
            width: var(--item-width);
            height: var(--item-height);
            border-radius: 0;
            overflow: hidden;
            position: relative;
            cursor: pointer;
            transition: transform 0.1s ease, box-shadow 0.3s ease;
            background-color: var(--secondary-color);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }

        @media (hover: hover) and (pointer: fine) {
            .custom-carousel-item:hover {
                transform: translateY(-4px);
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.6);
                z-index: 10;
            }
        }

        .poster-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        .poster-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
            transition: opacity 0.3s ease;
        }

        .detail-background {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            filter: brightness(0.7);
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 2;
            display: none;
        }

        .carousel-overlay {
            position: absolute;
            top: 40%;
            left: 0;
            right: 0;
            bottom: 0;
            padding: 15px;
            color: white;
            background: linear-gradient(transparent, rgba(0, 0, 0, 0.9));
            transform: translateY(20px);
            transition: transform 0.3s ease, opacity 0.3s ease;
            opacity: 0;
            z-index: 3;
        }

        .carousel-title {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 5px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .carousel-meta {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 0.8rem;
            color: var(--text-secondary);
            margin-bottom: 8px;
            flex-wrap: wrap;
        }

        .carousel-meta span {
            display: flex;
            align-items: center;
        }

        .carousel-meta span:not(:last-child)::after {
            content: '•';
            margin-left: 10px;
            color: var(--text-secondary);
        }

        .carousel-rating {
            display: flex;
            align-items: center;
            color: #ffd700;
        }

        .carousel-rating i {
            font-size: 0.7rem;
            margin-right: 3px;
        }

        .carousel-description {
            font-size: 0.8rem;
            line-height: 1.3;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* Modal hover al estilo Rakuten - Animaciones mejoradas */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: transparent;
            z-index: 1000;
            display: none;
            pointer-events: none;
        }

        .modal-content {
            position: absolute;
            background: linear-gradient(rgb(0, 0, 0) 72.64%, rgb(20, 20, 20) 100%);
            width: calc(var(--item-width) * var(--modal-scale));
            height: calc(var(--item-height) * var(--modal-scale));
            border-radius: 4px;
            box-shadow: rgba(0, 0, 0, 0.65) 0px 0px 50px 16px;
            overflow: hidden;
            transform-origin: center;
            opacity: 0;
            transform: scale(0.9);
            transition: opacity 150ms ease-out, transform 150ms ease-out;
            pointer-events: auto;
            z-index: 1001;
            will-change: transform, opacity;
            cursor: pointer;
        }

        .modal-content.show {
            opacity: 1;
            transform: scale(1);
        }

        .modal-header {
            position: relative;
            height: 0;
            padding-bottom: 42.25%; /* 16:9 aspect ratio */
            background-color: #000;
        }

        .modal-header::after {
            content: "";
            position: absolute;
            top: 0px;
            left: 0px;
            width: 100%;
            height: 100%;
            background: linear-gradient(rgba(16, 16, 16, 0) 40%, rgb(16, 16, 16) 100%);
        }

        .modal-backdrop {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            filter: brightness(0.7);
            opacity: 0.7;
        }

        .modal-body {
            padding: 15px;
            color: white;
            height: calc(100% - 42.25%);
            overflow-y: auto;
        }

        .modal-body h2 {
            font-size: 1.2rem;
            margin-bottom: 10px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .modal-body .meta-info {
            display: flex;
            gap: 10px;
            font-size: 0.8rem;
            color: var(--text-secondary);
            margin-bottom: 10px;
            flex-wrap: wrap;
        }

        .modal-body .meta-info span {
            display: flex;
            align-items: center;
        }

        .modal-body .meta-info span:not(:last-child)::after {
            content: '•';
            margin-left: 10px;
            color: var(--text-secondary);
        }

        .modal-body .rating {
            color: #ffd700;
        }

        .modal-body .description {
            font-size: 0.8rem;
            line-height: 1.4;
            margin-bottom: 15px;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .modal-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .modal-action-btn {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 8px 15px;
            border-radius: 4px;
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
            text-decoration: none;
            transition: all 0.2s ease;
            cursor: pointer;
            border: none;
            font-family: inherit;
            font-size: 0.8rem;
        }

        .modal-action-btn:hover {
            background-color: var(--primary-color);
        }

        .modal-action-btn i {
            font-size: 1rem;
        }

        .details-modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 1001;
            display: none;
            overflow-y: auto;
            transition: opacity 0.3s ease;
        }

        .details-modal-overlay.show {
            display: block;
            opacity: 1;
        }

        .details-modal-content {
            width: 90%;
            max-width: 900px;
            background: linear-gradient(rgb(16, 16, 16) 87.2%, rgb(28, 28, 28) 100%);
            box-shadow: rgba(0, 0, 0, 0.784) 0px 2px 15px 0;
            border-radius: 8px;
            overflow: hidden;
            margin: 40px auto;
            transform: translateY(20px);
            opacity: 0;
            transition: transform 0.3s ease, opacity 0.3s ease;
        }

        .details-modal-overlay.show .details-modal-content {
            transform: translateY(0);
            opacity: 1;
        }

        .details-modal-header {
            position: relative;
            height: 0;
            padding-bottom: 42.25%; /* 16:9 aspect ratio */
            background-color: #000;
        }

        .details-modal-header::after {
            content: "";
            position: absolute;
            top: 0px;
            left: 0px;
            width: 100%;
            height: 100%;
            background: linear-gradient(rgba(16, 16, 16, 0) 40%, rgb(16, 16, 16) 100%);
        }

        .details-modal-backdrop {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            filter: brightness(0.7);
            opacity: 0.7;
        }

        .details-modal-close {
            position: absolute;
            top: 20px;
            right: 20px;
            background-color: rgba(0, 0, 0, 0.7);
            border: none;
            color: white;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 10;
            transition: all 0.2s ease;
        }

        .details-modal-close:hover {
            background-color: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
        }

        .details-modal-body {
            padding: 24px;
            color: white;
        }

        .details-modal-title {
            font-size: 2.2rem;
            font-weight: 700;
            margin-bottom: 12px;
            line-height: 1.2;
            text-shadow: 0 2px 4px rgba(0,0,0,0.5), 0 4px 8px rgba(0,0,0,0.3);
        }

        .details-modal-original-title {
            font-size: 1rem;
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 16px;
        }

        .details-modal-meta {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 12px;
            margin-bottom: 16px;
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.8);
        }

        .details-modal-meta-item {
            display: flex;
            align-items: center;
        }

        .details-modal-meta-item.rating {
            color: #ffd700;
        }

        .details-modal-meta-separator {
            margin: 0 8px;
            color: rgba(255, 255, 255, 0.5);
        }

        /* Nueva fila de metadatos para audios y subtítulos */
        .audio-subtitles-info {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 12px;
            margin-bottom: 16px;
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.8);
        }

        .audio-subtitles-item {
            display: flex;
            align-items: center;
            cursor: pointer;
            transition: color 0.2s ease;
        }

        .audio-subtitles-item:hover {
            color: var(--primary-color);
        }

        .audio-subtitles-item i {
            margin-right: 6px;
        }

        .audio-subtitles-item .expandable-content {
            display: none;
            margin-left: 20px;
            margin-top: 5px;
            width: 100%;
        }

        .audio-subtitles-item.expanded .expandable-content {
            display: block;
        }

        .details-modal-actions {
            display: flex;
            gap: 12px;
            margin-bottom: 24px;
            flex-wrap: wrap;
        }

        .details-modal-action-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
            font-size: 0.9rem;
            position: relative;
        }

        .details-modal-action-btn.primary {
            background-color: var(--primary-color);
            color: white;
            border-radius: 999px !important;
        }

        .details-modal-action-btn.secondary {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
        }

        .details-modal-action-btn.circular {
            width: 44px;
            height: 44px;
            border-radius: 50% !important;
            padding: 0;
            justify-content: center;
            background-color: transparent;
            transition: all 0.3s ease;
            opacity: 0.7;
            transform: scale(0.9);
        }

        .details-modal-action-btn.circular:hover {
            background-color: white;
            opacity: 1;
            transform: scale(1);
        }

        .details-modal-action-btn.circular:hover i {
            color: black;
        }

        .details-modal-action-btn:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }

        .details-modal-action-btn i {
            margin-right: 8px;
            font-size: 1rem;
        }

        .details-modal-action-btn.circular i {
            margin-right: 0;
            color: white;
        }

        .details-modal-action-btn .tooltip {
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background-color: white;
            color: black;
            padding: 6px 12px;
            border-radius: 4px;
            font-size: 0.9rem;
            white-space: nowrap;
            opacity: 0;
            visibility: hidden;
            transition: all 0.2s ease;
            margin-bottom: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            font-weight: bold;
            z-index: 10;
        }

        .details-modal-action-btn .tooltip::after {
            content: '';
            position: absolute;
            top: 100%;
            left: 50%;
            transform: translateX(-50%);
            border-width: 8px;
            border-style: solid;
            border-color: white transparent transparent transparent;
        }

        .details-modal-tagline {
            font-size: 1.1rem;
            font-style: italic;
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 16px;
            text-align: center;
            padding: 0 20px;
        }

        .details-modal-description {
            margin-bottom: 24px;
            line-height: 1.6;
            color: rgba(255, 255, 255, 0.9);
        }

        .details-modal-info {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 16px;
            margin-bottom: 24px;
        }

        .details-modal-info-item {
            margin-bottom: 8px;
        }

        .details-modal-info-label {
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.6);
            margin-bottom: 4px;
        }

        .details-modal-info-value {
            font-size: 0.9rem;
            color: white;
        }

        .details-modal-crew {
            margin-bottom: 24px;
        }

        .details-modal-crew-title {
            font-size: 1.2rem;
            margin-bottom: 12px;
            font-weight: 500;
        }

        .details-modal-crew-list {
            display: flex;
            flex-wrap: wrap;
            gap: 16px;
        }

        .details-modal-crew-item {
            flex: 0 0 calc(50% - 8px);
            display: flex;
            align-items: center;
            gap: 12px;
            background-color: rgba(42, 42, 42, 0.5);
            padding: 12px;
            border-radius: 4px;
        }

        .details-modal-crew-photo {
            width: 50px;
            height: 50px;
            border-radius: 4px;
            object-fit: cover;
            background-color: #2a2a2a;
        }

        .details-modal-crew-info {
            flex: 1;
        }

        .details-modal-crew-name {
            font-size: 0.9rem;
            font-weight: 500;
            margin-bottom: 2px;
        }

        .details-modal-crew-role {
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.7);
        }

        .details-modal-cast {
            margin-top: 24px;
        }

        .details-modal-cast-title {
            font-size: 1.2rem;
            margin-bottom: 12px;
            font-weight: 500;
        }

        .details-modal-cast-list {
            display: flex;
            gap: 16px;
            overflow-x: auto;
            padding-bottom: 8px;
        }

        .details-modal-cast-item {
            flex: 0 0 auto;
            width: 120px;
            text-align: center;
        }

        .details-modal-cast-photo {
            width: 100%;
            height: 160px;
            border-radius: 4px;
            object-fit: cover;
            margin-bottom: 8px;
            background-color: #2a2a2a;
        }

        .details-modal-cast-name {
            font-size: 0.9rem;
            font-weight: 500;
            margin-bottom: 2px;
        }

        .details-modal-cast-character {
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.7);
        }

        /* Estilos para las galerías de imágenes */
        .details-modal-gallery-section {
            margin-top: 24px;
        }

        .details-modal-gallery-title {
            font-size: 1.2rem;
            margin-bottom: 12px;
            font-weight: 500;
        }

        .details-modal-gallery-list {
            display: flex;
            gap: 16px;
            overflow-x: auto;
            padding-bottom: 8px;
        }

        .details-modal-gallery-item {
            flex: 0 0 auto;
            position: relative;
            border-radius: 4px;
            overflow: hidden;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .details-modal-gallery-item.poster {
            width: 120px;
            height: 180px;
        }

        .details-modal-gallery-item.backdrop {
            width: 240px;
            height: 135px;
        }

        .details-modal-gallery-item.more {
            width: 120px;
            height: 180px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: rgba(42, 42, 42, 0.5);
            color: white;
            font-size: 0.9rem;
            text-align: center;
            padding: 10px;
        }

        .details-modal-gallery-item.more i {
            font-size: 1.5rem;
            margin-bottom: 8px;
        }

        .details-modal-gallery-item:hover {
            transform: scale(1.02);
            z-index: 1;
        }

        .details-modal-gallery-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .details-modal-gallery-item:hover .details-modal-gallery-image {
            transform: scale(1.05);
        }

        /* Skeleton para galerías */
        .gallery-skeleton {
            display: flex;
            gap: 16px;
            overflow-x: auto;
            padding-bottom: 8px;
        }

        .gallery-skeleton-item {
            flex: 0 0 auto;
            position: relative;
            border-radius: 4px;
            overflow: hidden;
            background-color: rgba(42, 42, 42, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .gallery-skeleton-item.poster {
            width: 120px;
            height: 180px;
        }

        .gallery-skeleton-item.backdrop {
            width: 240px;
            height: 135px;
        }

        .gallery-skeleton-spinner {
            width: 30px;
            height: 30px;
            border: 3px solid rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            border-top-color: var(--primary-color);
            animation: spin 1s linear infinite;
        }

        /* Modal para imágenes */
        .gallery-image-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.9);
            z-index: 1003;
            display: none;
            justify-content: center;
            align-items: center;
        }

        .gallery-image-modal-content {
            max-width: 90%;
            max-height: 90%;
            position: relative;
        }

        .gallery-image-modal-img {
            max-width: 100%;
            max-height: 90vh;
            object-fit: contain;
        }

        .gallery-image-modal-close {
            position: absolute;
            top: -50px;
            right: 0;
            background: rgba(0, 0, 0, 0.7);
            border: none;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            font-size: 1.5rem;
            cursor: pointer;
            z-index: 10;
        }

        .gallery-image-modal-nav {
            position: absolute;
            top: 50%;
            width: 100%;
            display: flex;
            justify-content: space-between;
            padding: 0 20px;
            transform: translateY(-50%);
            z-index: 5;
        }

        .gallery-image-modal-nav-btn {
            background-color: rgba(0, 0, 0, 0.7);
            border: none;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 1.2rem;
        }

        .details-modal-tmdb-logo {
            width: 75px;
            margin-left: 8px;
            vertical-align: middle;
            cursor: pointer;
            transition: opacity 0.2s ease;
        }

        .details-modal-tmdb-logo:hover {
            opacity: 0.8;
        }

        .video-modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.9);
            z-index: 1002;
            display: none;
            justify-content: center;
            align-items: center;
        }

        .video-modal-content {
            width: 80%;
            max-width: 900px;
            height: 80%;
            background-color: #000;
            position: relative;
        }

        .video-modal-close {
            position: absolute;
            top: -40px;
            right: 0;
            background: transparent;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
        }

        .video-iframe {
            width: 100%;
            height: 100%;
            border: none;
        }

        .custom-carousel-more {
            flex: 0 0 auto;
            width: var(--item-width);
            height: var(--item-height);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: rgba(42, 42, 42, 0.5);
            border-radius: 0;
            color: var(--text-color);
            text-decoration: none;
            transition: background-color 0.3s ease;
        }

        .custom-carousel-more:hover {
            background-color: rgba(42, 42, 42, 0.8);
        }

        .custom-carousel-more i {
            font-size: 2rem;
            margin-bottom: 10px;
        }

        .custom-carousel-more span {
            font-size: 1rem;
            font-weight: 500;
        }

        .loader {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 4;
        }

        .loader i {
            font-size: 2rem;
            color: var(--text-color);
            animation: spin 1s linear infinite;
        }

        .carousel-progress {
            height: 3px;
            background-color: rgba(255, 255, 255, 0.2);
            margin-top: 10px;
            position: relative;
            border-radius: 2px;
            overflow: hidden;
        }

        .carousel-progress-bar {
            height: 100%;
            background-color: var(--primary-color);
            width: 0;
            transition: width 0.3s ease;
        }

        .carousel-nav {
            display: none;
            justify-content: space-between;
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            transform: translateY(-50%);
            pointer-events: none;
            z-index: 5;
        }

        .carousel-nav-btn {
            pointer-events: all;
            background-color: rgba(0, 0, 0, 0.7);
            border: none;
            color: white;
            width: 40px;
            height: 80px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            opacity: 0;
        }

        .carousel-nav-btn:hover {
            background-color: rgba(0, 0, 0, 0.9);
        }

        .carousel-nav-btn.prev {
            border-radius: 0 4px 4px 0;
        }

        .carousel-nav-btn.next {
            border-radius: 4px 0 0 4px;
        }

        .carousel-nav-btn i {
            font-size: 1.5rem;
        }

        .carousel-container {
            position: relative;
        }

        .carousel-container:hover .carousel-nav-btn {
            opacity: 1;
        }

        /* Estilo para la edad recomendada */
        .age-rating {
            display: inline-block;
            padding: 2px 6px;
            border: 1px solid rgba(255, 255, 255, 0.5);
            border-radius: 3px;
            font-size: 0.8rem;
            margin-left: 5px;
        }

        /* Estilos para los tooltips */
        .details-modal-action-btn:hover .tooltip {
            opacity: 1;
            visibility: visible;
            transform: translateX(-50%) translateY(0);
        }

        /* ===== SOLUCIÓN ESPECÍFICA PARA iOS ===== */
        @supports (-webkit-touch-callout: none) {
            .details-modal-overlay {
                position: fixed;
                height: 100vh;
                overflow-y: scroll;
                -webkit-overflow-scrolling: touch;
            }
            
            .details-modal-content {
                animation: iosModalIn 0.4s ease-out forwards;
                transform: translate3d(0,0,0);
            }
            
            .modal-content {
                transform: translate3d(-50%,-50%,0) scale(1);
            }
            
            .carousel-container {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
            }
            
            #carousel-wrapper {
                -webkit-overflow-scrolling: touch;
            }
        }

        @keyframes iosModalIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .ios-helper {
            transform: translateZ(0);
            backface-visibility: hidden;
            perspective: 1000px;
            position: absolute;
        }

        /* Estilos para el modal de compartir */
        .share-modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 1004;
            display: none;
            justify-content: center;
            align-items: center;
        }

        .share-modal-content {
            background: linear-gradient(rgb(16, 16, 16) 87.2%, rgb(28, 28, 28) 100%);
            border-radius: 8px;
            padding: 24px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
            transform: translateY(20px);
            opacity: 0;
            transition: all 0.3s ease;
        }

        .share-modal-overlay.show .share-modal-content {
            transform: translateY(0);
            opacity: 1;
        }

        .share-modal-close {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
        }

        .share-modal-title {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: white;
            text-align: center;
        }

        .share-options {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 25px;
            flex-wrap: wrap;
        }

        .share-option {
            display: flex;
            flex-direction: column;
            align-items: center;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .share-option:hover {
            transform: scale(1.1);
        }

        .share-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-bottom: 8px;
        }

        .share-icon.facebook {
            background-color: #3b5998;
        }

        .share-icon.twitter {
            background-color: #1da1f2;
        }

        .share-icon.whatsapp {
            background-color: #25d366;
        }

        .share-icon.telegram {
            background-color: #0088cc;
        }

        .share-icon.link {
            background-color: var(--primary-color);
        }

        .share-option-text {
            color: white;
            font-size: 0.8rem;
        }

        .share-link-container {
            display: flex;
            margin-bottom: 15px;
        }

        .share-link-input {
            flex: 1;
            padding: 10px;
            border: 1px solid #444;
            border-radius: 4px 0 0 4px;
            background-color: #2a2a2a;
            color: white;
            font-size: 0.9rem;
        }

        .share-link-button {
            padding: 10px 15px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 0 4px 4px 0;
            cursor: pointer;
            transition: background-color 0.2s;
            font-size: 0.9rem;
        }

        .share-link-button:hover {
            background-color: #e00036;
        }

        .share-preview {
            display: flex;
            border: 1px solid #444;
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 20px;
        }

        .share-preview-image {
            width: 120px;
            height: 160px;
            object-fit: cover;
        }

        .share-preview-content {
            flex: 1;
            padding: 15px;
            background-color: #2a2a2a;
        }

        .share-preview-title {
            font-size: 1.1rem;
            margin-bottom: 8px;
            color: white;
        }

        .share-preview-description {
            font-size: 0.9rem;
            color: #ccc;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        @media (max-width: 768px) {
            :root {
                --item-width: 123px;
                --item-height: 172px;
                --modal-scale: 1.5;
            }
            
            .modal-overlay {
                padding: 0;
                align-items: flex-end;
            }
            
            .modal-content {
                width: 100%;
                height: 90vh;
                max-height: 90vh;
                border-radius: 12px 12px 0 0;
                animation: mobileModalIn 300ms ease-out forwards;
                transform: translateY(100%);
                top: auto;
                bottom: 0;
                left: 0;
                transform-origin: bottom center;
                background: linear-gradient(rgb(0, 0, 0) 72.64%, rgb(20, 20, 20) 100%);
            }
            
            .modal-header {
                height: 30vh;
                padding-bottom: 0;
            }
            
            .modal-body {
                height: calc(90vh - 30vh);
            }
            
            .details-modal-content {
                width: 100%;
                max-width: 100%;
                border-radius: 0;
                margin: 0;
            }
            
            .details-modal-header {
                padding-bottom: 56.25%; /* 16:9 en móvil para más altura */
            }
            
            .details-modal-body {
                padding: 16px;
            }
            
            .details-modal-title {
                font-size: 1.5rem;
            }
            
            .details-modal-actions {
                flex-direction: column;
                gap: 8px;
            }
            
            .details-modal-action-btn {
                width: 100%;
                padding: 10px 12px;
                font-size: 0.8rem;
            }
            
            .details-modal-action-btn.primary {
                order: -1; /* Mover el botón principal arriba */
            }
            
            .details-modal-action-btn.circular {
                width: 44px;
                height: 44px;
                margin: 0 auto;
            }
            
            .details-modal-action-btn.circular span {
                display: none;
            }
            
            .details-modal-action-btn i {
                margin-right: 0;
                font-size: 1rem;
            }
            
            .details-modal-close {
                top: 10px;
                right: 10px;
                width: 30px;
                height: 30px;
            }
            
            .carousel-nav {
                display: none !important;
            }
            
            .details-modal-gallery-list {
                gap: 12px;
            }
            
            .details-modal-gallery-item.poster {
                width: 100px;
                height: 150px;
            }
            
            .details-modal-gallery-item.backdrop {
                width: 180px;
                height: 100px;
            }
            
            .details-modal-gallery-item.more {
                width: 100px;
                height: 150px;
            }
            
            .details-modal-cast-item {
                width: 100px;
            }
            
            .details-modal-cast-photo {
                height: 140px;
            }
            
            .gallery-skeleton-item.poster {
                width: 100px;
                height: 150px;
            }
            
            .gallery-skeleton-item.backdrop {
                width: 180px;
                height: 100px;
            }
            
            /* Estilos responsivos para el modal de compartir */
            .share-modal-content {
                padding: 16px;
            }
            
            .share-options {
                flex-wrap: wrap;
                gap: 15px;
            }
            
            .share-icon {
                width: 40px;
                height: 40px;
                font-size: 1.2rem;
            }
            
            .share-preview {
                flex-direction: column;
            }
            
            .share-preview-image {
                width: 100%;
                height: 180px;
            }
            
            @keyframes mobileModalIn {
                0% {
                    transform: translateY(100%);
                    opacity: 0;
                }
                100% {
                    transform: translateY(0);
                    opacity: 1;
                }
            }
            
            .modal-content.closing {
                animation: mobileModalOut 250ms ease-in forwards;
            }
            
            .details-modal-content.closing {
                animation: mobileModalOut 250ms ease-in forwards;
            }
            
            @keyframes mobileModalOut {
                0% {
                    transform: translateY(0);
                    opacity: 1;
                }
                100% {
                    transform: translateY(100%);
                    opacity: 0;
                }
            }
            
            .carousel-overlay {
                top: 40%;
                padding: 10px;
            }
            
            .video-modal-content {
                width: 95%;
                height: 50%;
            }
            
            .details-modal-crew-item {
                flex: 0 0 100%;
            }
            
            /* Estilos específicos para móviles en los botones de acción */
            .details-modal-actions-row {
                display: flex;
                justify-content: center;
                gap: 12px;
                margin-top: 8px;
            }
            
            /* Mostrar texto en botón primario en móvil */
            .details-modal-action-btn.primary span {
                display: inline !important;
            }
        }

        @media (max-width: 480px) {
            :root {
                --item-width: 96px;
                --item-height: 134px;
                --modal-scale: 1.3;
            }
            
            .carousel-section {
                margin-bottom: 30px;
            }
            
            .carousel-title {
                font-size: 1.5rem;
            }
            
            .modal-actions {
                flex-direction: row;
                gap: 8px;
            }
            
            .modal-action-btn {
                justify-content: center;
                padding: 8px 10px;
                font-size: 0.7rem;
            }
            
            .details-modal-info {
                grid-template-columns: 1fr;
            }
            
            .details-modal-cast-item {
                width: 80px;
            }
            
            .details-modal-cast-photo {
                height: 120px;
            }
            
            .details-modal-gallery-item.poster {
                width: 80px;
                height: 120px;
            }
            
            .details-modal-gallery-item.backdrop {
                width: 140px;
                height: 80px;
            }
            
            .details-modal-gallery-item.more {
                width: 80px;
                height: 120px;
            }
            
            .gallery-skeleton-item.poster {
                width: 80px;
                height: 120px;
            }
            
            .gallery-skeleton-item.backdrop {
                width: 140px;
                height: 80px;
            }
            
            .details-modal-action-btn {
                min-width: auto;
                padding: 8px 10px;
            }
            
            .details-modal-action-btn i {
                margin-right: 0;
            }
            
            .details-modal-action-btn span {
                display: none;
            }
            
            .details-modal-action-btn .tooltip {
                display: block !important;
                opacity: 1 !important;
                visibility: visible !important;
                position: static;
                transform: none;
                background: transparent;
                color: white;
                padding: 0;
                margin: 0;
                box-shadow: none;
                font-size: 0.7rem;
                font-weight: normal;
            }
            
            .details-modal-action-btn .tooltip::after {
                display: none;
            }
            
            /* Mostrar texto en botón primario en móvil */
            .details-modal-action-btn.primary span {
                display: inline !important;
                margin-left: 8px;
            }
            
            /* Ajustes adicionales para el modal de compartir en móviles pequeños */
            .share-options {
                gap: 10px;
            }
            
            .share-icon {
                width: 36px;
                height: 36px;
                font-size: 1rem;
            }
            
            .share-option-text {
                font-size: 0.7rem;
            }
            
            .share-link-input {
                padding: 8px;
            }
            
            .share-link-button {
                padding: 8px 12px;
            }
        }
    </style>
</head>
<body>
    <!-- Div helper para iOS -->
    <div id="ios-helper" class="ios-helper" style="display:none;"></div>

    <!-- Metatags dinámicos para compartir -->
    <div id="dynamic-meta-tags" style="display:none;">
        <meta property="og:title" id="og-title" content="">
        <meta property="og:description" id="og-description" content="">
        <meta property="og:image" id="og-image" content="">
        <meta property="og:url" id="og-url" content="">
        <meta property="og:type" content="website">
        <meta name="twitter:card" content="summary_large_image">
        <meta name="twitter:title" id="twitter-title" content="">
        <meta name="twitter:description" id="twitter-description" content="">
        <meta name="twitter:image" id="twitter-image" content="">
    </div>

    <!-- Carrusel -->
    <div class="carousel-section">
        <h1 class="carousel-title">Películas</h1>
        <div class="carousel-container">
            <div class="carousel-skeleton" id="carousel-skeleton">
                <div class="skeleton-item"><div class="skeleton-spinner"></div></div>
                <div class="skeleton-item"><div class="skeleton-spinner"></div></div>
                <div class="skeleton-item"><div class="skeleton-spinner"></div></div>
                <div class="skeleton-item"><div class="skeleton-spinner"></div></div>
                <div class="skeleton-item"><div class="skeleton-spinner"></div></div>
                <div class="skeleton-item"><div class="skeleton-spinner"></div></div>
                <div class="skeleton-item"><div class="skeleton-spinner"></div></div>
                <div class="skeleton-item"><div class="skeleton-spinner"></div></div>
                <div class="skeleton-item"><div class="skeleton-spinner"></div></div>
                <div class="skeleton-item"><div class="skeleton-spinner"></div></div>
                <div class="skeleton-item"><div class="skeleton-spinner"></div></div>
                <div class="skeleton-item"><div class="skeleton-spinner"></div></div>
            </div>
            <div id="carousel-wrapper" style="display:none;"></div>
            <div class="carousel-progress">
                <div class="carousel-progress-bar"></div>
            </div>
            <div class="carousel-nav" id="carousel-nav">
                <button class="carousel-nav-btn prev" id="carousel-prev"><i class="fas fa-chevron-left"></i></button>
                <button class="carousel-nav-btn next" id="carousel-next"><i class="fas fa-chevron-right"></i></button>
            </div>
        </div>
    </div>

    <!-- Modales -->
    <div class="modal-overlay" id="modal-overlay">
        <div class="modal-content" id="modal-content">
            <div class="modal-header">
                <img class="modal-backdrop" id="modal-backdrop" src="" alt="">
            </div>
            <div class="modal-body" id="modal-body">
                <!-- Contenido se llenará dinámicamente -->
            </div>
        </div>
    </div>

    <div class="details-modal-overlay" id="details-modal-overlay">
        <div class="details-modal-content" id="details-modal-content">
            <button class="details-modal-close" id="details-modal-close">&times;</button>
            <div class="details-modal-header">
                <img class="details-modal-backdrop" id="details-modal-backdrop" src="" alt="">
            </div>
            <div class="details-modal-body" id="details-modal-body">
                <!-- Contenido se llenará dinámicamente -->
            </div>
        </div>
    </div>

    <div class="video-modal-overlay" id="video-modal-overlay">
        <div class="video-modal-content">
            <button class="video-modal-close" id="video-modal-close">&times;</button>
            <iframe class="video-iframe" id="video-iframe" allowfullscreen></iframe>
        </div>
    </div>

    <div class="gallery-image-modal" id="gallery-image-modal">
        <button class="gallery-image-modal-close" id="gallery-image-modal-close">&times;</button>
        <div class="gallery-image-modal-nav">
            <button class="gallery-image-modal-nav-btn" id="gallery-image-modal-prev"><i class="fas fa-chevron-left"></i></button>
            <button class="gallery-image-modal-nav-btn" id="gallery-image-modal-next"><i class="fas fa-chevron-right"></i></button>
        </div>
        <div class="gallery-image-modal-content">
            <img class="gallery-image-modal-img" id="gallery-image-modal-img" src="" alt="">
        </div>
    </div>

    <!-- Modal para compartir -->
    <div class="share-modal-overlay" id="share-modal-overlay">
        <div class="share-modal-content" id="share-modal-content">
            <button class="share-modal-close" id="share-modal-close">&times;</button>
            <h3 class="share-modal-title">Compartir película</h3>
            
            <div class="share-preview" id="share-preview">
                <img class="share-preview-image" id="share-preview-image" src="" alt="Portada">
                <div class="share-preview-content">
                    <h4 class="share-preview-title" id="share-preview-title"></h4>
                    <p class="share-preview-description" id="share-preview-description"></p>
                </div>
            </div>
            
            <div class="share-options">
                <div class="share-option" id="share-facebook">
                    <div class="share-icon facebook">
                        <i class="fab fa-facebook-f"></i>
                    </div>
                    <span class="share-option-text">Facebook</span>
                </div>
                
                <div class="share-option" id="share-twitter">
                    <div class="share-icon twitter">
                        <i class="fab fa-twitter"></i>
                    </div>
                    <span class="share-option-text">Twitter</span>
                </div>
                
                <div class="share-option" id="share-whatsapp">
                    <div class="share-icon whatsapp">
                        <i class="fab fa-whatsapp"></i>
                    </div>
                    <span class="share-option-text">WhatsApp</span>
                </div>
                
                <div class="share-option" id="share-telegram">
                    <div class="share-icon telegram">
                        <i class="fab fa-telegram-plane"></i>
                    </div>
                    <span class="share-option-text">Telegram</span>
                </div>
                
                <div class="share-option" id="share-link">
                    <div class="share-icon link">
                        <i class="fas fa-link"></i>
                    </div>
                    <span class="share-option-text">Copiar enlace</span>
                </div>
            </div>
            
            <div class="share-link-container">
                <input type="text" class="share-link-input" id="share-link-input" readonly>
                <button class="share-link-button" id="share-link-button">Copiar</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // URL del archivo JSON en GitHub Pages
            const DATA_URL = "https://jfl4bur.github.io/Todogram/public/data.json";
            
            // Variables globales
            const wrapper = document.getElementById('carousel-wrapper');
            const skeleton = document.getElementById('carousel-skeleton');
            const progressBar = document.querySelector('.carousel-progress-bar');
            const modalOverlay = document.getElementById('modal-overlay');
            const modalContent = document.getElementById('modal-content');
            const modalBackdrop = document.getElementById('modal-backdrop');
            const modalBody = document.getElementById('modal-body');
            const detailsModalOverlay = document.getElementById('details-modal-overlay');
            const detailsModalContent = document.getElementById('details-modal-content');
            const detailsModalBackdrop = document.getElementById('details-modal-backdrop');
            const detailsModalBody = document.getElementById('details-modal-body');
            const detailsModalClose = document.getElementById('details-modal-close');
            const videoModalOverlay = document.getElementById('video-modal-overlay');
            const videoModalClose = document.getElementById('video-modal-close');
            const videoIframe = document.getElementById('video-iframe');
            const carouselNav = document.getElementById('carousel-nav');
            const carouselPrev = document.getElementById('carousel-prev');
            const carouselNext = document.getElementById('carousel-next');
            const galleryImageModal = document.getElementById('gallery-image-modal');
            const galleryImageModalImg = document.getElementById('gallery-image-modal-img');
            const galleryImageModalClose = document.getElementById('gallery-image-modal-close');
            const galleryImageModalPrev = document.getElementById('gallery-image-modal-prev');
            const galleryImageModalNext = document.getElementById('gallery-image-modal-next');
            const iosHelper = document.getElementById('ios-helper');
            const shareModalOverlay = document.getElementById('share-modal-overlay');
            const shareModalContent = document.getElementById('share-modal-content');
            const shareModalClose = document.getElementById('share-modal-close');
            const sharePreviewImage = document.getElementById('share-preview-image');
            const sharePreviewTitle = document.getElementById('share-preview-title');
            const sharePreviewDescription = document.getElementById('share-preview-description');
            const shareLinkInput = document.getElementById('share-link-input');
            const shareLinkButton = document.getElementById('share-link-button');
            
            // Elementos de metatags dinámicos
            const ogTitle = document.getElementById('og-title');
            const ogDescription = document.getElementById('og-description');
            const ogImage = document.getElementById('og-image');
            const ogUrl = document.getElementById('og-url');
            const twitterTitle = document.getElementById('twitter-title');
            const twitterDescription = document.getElementById('twitter-description');
            const twitterImage = document.getElementById('twitter-image');
            
            let activeItem = null;
            let isModalOpen = false;
            let isDetailsModalOpen = false;
            const carouselContainer = document.querySelector('.carousel-container');

            let index = 0;
            const step = 12;
            let moreAppended = false;
            let hoverTimeouts = {};
            let moviesData = [];
            let itemsPerPage = 5;
            let hoverModalTimeout = null;
            let hoverModalItem = null;
            let hoverModalOrigin = { x: 0, y: 0 };
            let currentShareUrl = '';

            // Variables para el control de la galería de imágenes
            let currentGalleryImages = [];
            let currentGalleryIndex = 0;
            const TMDB_API_KEY = 'f28077ae6a89b54c86be927ea88d64d9';
            
            // Detectar iOS
            const isIOS = () => {
                return /iPad|iPhone|iPod/.test(navigator.platform) || 
                      (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
            };

            // Función para normalizar texto (eliminar acentos y caracteres especiales)
            function normalizeText(text) {
                return text.normalize("NFD").replace(/[\u0300-\u036f]/g, "")
                    .toLowerCase()
                    .replace(/[^a-z0-9]/g, '-')
                    .replace(/-+/g, '-')
                    .replace(/^-|-$/g, '');
            }

            // Función para extraer el ID de la URL
            function getItemIdFromUrl() {
                const path = window.location.hash.substring(1);
                if (!path) return null;
                
                const params = new URLSearchParams(path);
                const id = params.get('id');
                const title = params.get('title');
                
                if (!id || !title) return null;
                
                return {
                    id: id,
                    normalizedTitle: title
                };
            }

            // Función para actualizar los metatags para compartir
            function updateMetaTags(item) {
                if (!item) return;
                
                const title = `Mira ${item.title} en nuestra plataforma`;
                const description = item.description || 'Una gran película que no te puedes perder';
                const imageUrl = item.posterUrl || 'https://via.placeholder.com/194x271';
                const url = `${window.location.origin}${window.location.pathname}#id=${item.id}&title=${normalizeText(item.title)}`;
                
                // Actualizar metatags
                ogTitle.content = title;
                ogDescription.content = description;
                ogImage.content = imageUrl;
                ogUrl.content = url;
                twitterTitle.content = title;
                twitterDescription.content = description;
                twitterImage.content = imageUrl;
                
                // Actualizar también la URL canónica
                const canonicalLink = document.querySelector('link[rel="canonical"]') || document.createElement('link');
                canonicalLink.rel = 'canonical';
                canonicalLink.href = url;
                document.head.appendChild(canonicalLink);
                
                // Forzar a Facebook a refrescar los metatags
                if (navigator.userAgent.includes('Facebook')) {
                    fetch(`https://graph.facebook.com/?id=${encodeURIComponent(url)}&scrape=true&method=post`);
                }
            }

            // Función para abrir el modal desde la URL
            async function openModalFromUrl() {
                const urlParams = getItemIdFromUrl();
                if (!urlParams) return;

                // Esperar a que los datos estén listos (solución para iOS)
                const waitForReady = () => {
                    return new Promise((resolve) => {
                        const check = () => {
                            if (moviesData.length > 0 && document.querySelector('.custom-carousel-item')) {
                                resolve(true);
                            } else {
                                setTimeout(check, 100);
                            }
                        };
                        check();
                    });
                };
                
                await waitForReady();
                
                const foundItem = moviesData.find(item => {
                    const itemId = item.id ? item.id.toString() : null;
                    const normalizedTitle = normalizeText(item.title);
                    return itemId === urlParams.id && normalizedTitle === urlParams.normalizedTitle;
                });

                if (!foundItem) return;
                
                const itemElements = document.querySelectorAll('.custom-carousel-item');
                const itemElement = Array.from(itemElements).find(el => {
                    const itemId = el.dataset.itemId;
                    return moviesData[itemId] && moviesData[itemId].id.toString() === urlParams.id;
                });

                if (!itemElement) return;
                
                // Scroll especial para iOS
                itemElement.scrollIntoView({ behavior: isIOS() ? 'auto' : 'smooth', block: 'center' });
                
                if (isIOS()) {
                    iosHelper.offsetHeight; // Forzar reflow
                    await new Promise(resolve => setTimeout(resolve, 300));
                }
                
                showDetailsModal(foundItem, itemElement);
                
                // Forzar redibujado en iOS
                if (isIOS()) {
                    setTimeout(() => {
                        iosHelper.offsetHeight;
                        detailsModalContent.style.animation = 'iosModalIn 0.4s ease-out forwards';
                    }, 50);
                }
            }

            function updateUrlForModal(item) {
                if (!item || item.id === '0') return;

                const normalizedTitle = normalizeText(item.title);
                const newHash = `id=${item.id}&title=${normalizedTitle}`;
                
                if (window.location.hash.substring(1) !== newHash) {
                    window.history.replaceState(null, null, `${window.location.pathname}#${newHash}`);
                }
                
                // Actualizar metatags cuando se abre un modal
                updateMetaTags(item);
            }

            function restoreUrl() {
                if (window.location.hash) {
                    window.history.replaceState(null, null, window.location.pathname);
                }
            }

            // Mostrar carrusel real y ocultar skeleton
            function showCarousel() {
                skeleton.style.display = 'none';
                wrapper.style.display = 'flex';
                
                if (window.matchMedia("(hover: hover) and (pointer: fine)").matches) {
                    carouselNav.style.display = 'flex';
                }
                
                calculateItemsPerPage();
            }

            function calculateItemsPerPage() {
                const itemWidth = parseInt(getComputedStyle(document.querySelector('.custom-carousel-item')).width);
                const gap = 4;
                const containerWidth = wrapper.clientWidth;
                itemsPerPage = Math.floor(containerWidth / (itemWidth + gap));
            }

            // Función para obtener póster de TMDB para el carrusel
            async function fetchTMDBPoster(tmdbUrl) {
                if (!tmdbUrl) return '';
                
                try {
                    const tmdbId = tmdbUrl.match(/movie\/(\d+)/)?.[1];
                    if (!tmdbId) return '';
                    
                    const response = await fetch(`https://api.themoviedb.org/3/movie/${tmdbId}?api_key=${TMDB_API_KEY}`);
                    if (!response.ok) return '';
                    
                    const data = await response.json();
                    return data.poster_path ? `https://image.tmdb.org/t/p/w500${data.poster_path}` : '';
                } catch (error) {
                    console.error('Error fetching TMDB poster:', error);
                    return '';
                }
            }

            // Función para obtener imágenes de TMDB
            async function fetchTMDBImages(tmdbUrl) {
                if (!tmdbUrl) return { posters: [], backdrops: [] };
                
                try {
                    const tmdbId = tmdbUrl.match(/movie\/(\d+)/)?.[1];
                    if (!tmdbId) return { posters: [], backdrops: [] };
                    
                    const response = await fetch(`https://api.themoviedb.org/3/movie/${tmdbId}/images?api_key=${TMDB_API_KEY}`);
                    if (!response.ok) return { posters: [], backdrops: [] };
                    
                    const data = await response.json();
                    
                    const posters = data.posters?.map(poster => ({
                        file_path: `https://image.tmdb.org/t/p/w500${poster.file_path}`
                    })) || [];
                    
                    const backdrops = data.backdrops?.map(backdrop => ({
                        file_path: `https://image.tmdb.org/t/p/w1280${backdrop.file_path}`
                    })) || [];
                    
                    return { posters, backdrops };
                } catch (error) {
                    console.error('Error fetching TMDB images:', error);
                    return { posters: [], backdrops: [] };
                }
            }

            function scrollToNextPage() {
                const itemWidth = parseInt(getComputedStyle(document.querySelector('.custom-carousel-item')).width);
                const gap = 4;
                const scrollAmount = itemsPerPage * (itemWidth + gap);
                
                wrapper.scrollBy({
                    left: scrollAmount,
                    behavior: 'smooth'
                });
            }

            function scrollToPrevPage() {
                const itemWidth = parseInt(getComputedStyle(document.querySelector('.custom-carousel-item')).width);
                const gap = 4;
                const scrollAmount = itemsPerPage * (itemWidth + gap);
                
                wrapper.scrollBy({
                    left: -scrollAmount,
                    behavior: 'smooth'
                });
            }

            // Función para obtener datos adicionales de TMDB
            async function fetchTMDBData(tmdbUrl) {
                if (!tmdbUrl) return null;
                
                try {
                    const tmdbId = tmdbUrl.match(/movie\/(\d+)/)?.[1];
                    if (!tmdbId) return null;
                    
                    const response = await fetch(`https://api.themoviedb.org/3/movie/${tmdbId}?api_key=${TMDB_API_KEY}&language=es-ES&append_to_response=credits,videos,release_dates`);
                    if (!response.ok) return null;
                    
                    const data = await response.json();
                    
                    let certification = '';
                    const releaseDates = data.release_dates?.results?.find(r => r.iso_3166_1 === 'ES');
                    if (releaseDates) {
                        certification = releaseDates.release_dates[0]?.certification || '';
                    }
                    
                    let trailerUrl = '';
                    const trailer = data.videos?.results?.find(v => v.site === 'YouTube' && v.type === 'Trailer');
                    if (trailer) {
                        trailerUrl = `https://www.youtube.com/watch?v=${trailer.key}`;
                    }
                    
                    const directors = [];
                    const writers = [];
                    
                    if (data.credits?.crew) {
                        data.credits.crew.forEach(person => {
                            if (person.job === 'Director') {
                                directors.push({
                                    id: person.id,
                                    name: person.name,
                                    profile_path: person.profile_path
                                });
                            } else if (person.job === 'Writer' || person.job === 'Screenplay') {
                                writers.push({
                                    id: person.id,
                                    name: person.name,
                                    profile_path: person.profile_path
                                });
                            }
                        });
                    }
                    
                    const cast = [];
                    if (data.credits?.cast) {
                        data.credits.cast.slice(0, 10).forEach(actor => {
                            cast.push({
                                id: actor.id,
                                name: actor.name,
                                character: actor.character,
                                profile_path: actor.profile_path
                            });
                        });
                    }
                    
                    return {
                        original_title: data.original_title,
                        tagline: data.tagline,
                        release_date: data.release_date,
                        runtime: data.runtime,
                        genres: data.genres?.map(g => g.name).join(', '),
                        vote_average: data.vote_average?.toFixed(1),
                        certification: certification,
                        overview: data.overview,
                        production_companies: data.production_companies?.map(c => c.name).join(', '),
                        production_countries: data.production_countries?.map(c => c.name).join(', '),
                        spoken_languages: data.spoken_languages?.map(l => l.name).join(', '),
                        status: data.status,
                        trailer_url: trailerUrl,
                        directors: directors,
                        writers: writers,
                        cast: cast
                    };
                } catch (error) {
                    console.error('Error fetching TMDB data:', error);
                    return null;
                }
            }

            function getYouTubeEmbedUrl(url) {
                if (!url) return '';
                const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
                const match = url.match(regExp);
                const videoId = (match && match[2].length === 11) ? match[2] : null;
                return videoId ? `https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0` : '';
            }

            function getUpnEmbedUrl(url) {
                if (!url) return '';
                return url;
            }

            function showVideoModal(videoUrl) {
                if (!videoUrl) return;
                
                let embedUrl = '';
                if (videoUrl.includes('youtube.com') || videoUrl.includes('youtu.be')) {
                    embedUrl = getYouTubeEmbedUrl(videoUrl);
                } else if (videoUrl.includes('upn.one')) {
                    embedUrl = getUpnEmbedUrl(videoUrl);
                }
                
                if (!embedUrl) return;
                
                videoIframe.src = embedUrl;
                videoModalOverlay.style.display = 'flex';
                document.body.style.overflow = 'hidden';
            }

            function showGalleryImageModal(images, startIndex = 0) {
                if (!images || images.length === 0) return;
                
                currentGalleryImages = images;
                currentGalleryIndex = startIndex;
                
                galleryImageModalImg.src = images[startIndex].file_path;
                galleryImageModal.style.display = 'flex';
                document.body.style.overflow = 'hidden';
            }

            function closeGalleryImageModal() {
                galleryImageModal.style.display = 'none';
                document.body.style.overflow = 'auto';
                currentGalleryImages = [];
                currentGalleryIndex = 0;
            }

            function navigateGallery(direction) {
                if (direction === 'prev') {
                    currentGalleryIndex = (currentGalleryIndex - 1 + currentGalleryImages.length) % currentGalleryImages.length;
                } else {
                    currentGalleryIndex = (currentGalleryIndex + 1) % currentGalleryImages.length;
                }
                
                galleryImageModalImg.src = currentGalleryImages[currentGalleryIndex].file_path;
            }

            function calculateModalPosition(itemElement) {
                const rect = itemElement.getBoundingClientRect();
                const carouselRect = carouselContainer.getBoundingClientRect();
                const modalWidth = parseFloat(getComputedStyle(modalContent).width);
                
                let leftPosition = rect.left + (rect.width / 2);
                
                if (leftPosition - (modalWidth / 2) < carouselRect.left) {
                    leftPosition = carouselRect.left + (modalWidth / 2);
                }
                
                if (leftPosition + (modalWidth / 2) > carouselRect.right) {
                    leftPosition = carouselRect.right - (modalWidth / 2);
                }
                
                const topPosition = rect.top + (rect.height / 2);
                
                return {
                    top: topPosition,
                    left: leftPosition
                };
            }

            // Función para crear skeleton de galería
            function createGallerySkeleton(type, count) {
                const skeletonItems = [];
                for (let i = 0; i < count; i++) {
                    skeletonItems.push(`
                        <div class="gallery-skeleton-item ${type}">
                            <div class="gallery-skeleton-spinner"></div>
                        </div>
                    `);
                }
                
                return `
                    <div class="details-modal-gallery-section">
                        <h3 class="details-modal-gallery-title">${type === 'poster' ? 'Carteles' : 'Imágenes de fondo'}</h3>
                        <div class="gallery-skeleton">
                            ${skeletonItems.join('')}
                        </div>
                    </div>
                `;
            }

            // Función mejorada para crear secciones de galería
            function createGallerySection(images, title, type) {
                if (!images || images.length === 0) return '';
                
                const showCount = type === 'posters' ? 5 : 4;
                const itemClass = type === 'posters' ? 'poster' : 'backdrop';
                
                return `
                    <div class="details-modal-gallery-section">
                        <h3 class="details-modal-gallery-title">${title}</h3>
                        <div class="details-modal-gallery-list">
                            ${images.slice(0, showCount).map((image, index) => `
                                <div class="details-modal-gallery-item ${itemClass}" data-gallery-type="${type}" data-index="${index}">
                                    <img class="details-modal-gallery-image" 
                                         src="${image.file_path}" 
                                         loading="lazy"
                                         alt="${title} - ${type} ${index + 1}">
                                </div>
                            `).join('')}
                            ${images.length > showCount ? `
                                <div class="details-modal-gallery-item more" data-gallery-type="${type}" data-show-more="true">
                                    <i class="fas fa-images"></i>
                                    <span>Ver más (${images.length - showCount})</span>
                                </div>
                            ` : ''}
                        </div>
                    </div>
                `;
            }

            function createCastSection(cast) {
                if (!cast || cast.length === 0) return '';
                
                return `
                    <div class="details-modal-cast">
                        <h3 class="details-modal-cast-title">Reparto principal</h3>
                        <div class="details-modal-cast-list">
                            ${cast.map(person => `
                                <div class="details-modal-cast-item">
                                    <img class="details-modal-cast-photo" 
                                         src="${person.profile_path ? `https://image.tmdb.org/t/p/w185${person.profile_path}` : 'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg'}" 
                                         alt="${person.name}"
                                         loading="lazy">
                                    <div class="details-modal-cast-name">${person.name}</div>
                                    <div class="details-modal-cast-character">${person.character}</div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;
            }

            function createCrewSection(crew, title) {
                if (!crew || crew.length === 0) return '';
                
                return `
                    <div class="details-modal-crew">
                        <h3 class="details-modal-crew-title">${title}</h3>
                        <div class="details-modal-crew-list">
                            ${crew.slice(0, 6).map(person => `
                                <div class="details-modal-crew-item">
                                    <img class="details-modal-crew-photo" 
                                         src="${person.profile_path ? `https://image.tmdb.org/t/p/w185${person.profile_path}` : 'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg'}" 
                                         alt="${person.name}"
                                         loading="lazy">
                                    <div class="details-modal-crew-info">
                                        <div class="details-modal-crew-name">${person.name}</div>
                                        <div class="details-modal-crew-role">${title}</div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;
            }

            function formatRuntime(minutes) {
                if (!minutes) return 'No disponible';
                const hours = Math.floor(minutes / 60);
                const mins = minutes % 60;
                return `${hours}h ${mins}m`;
            }

            function formatReleaseDate(dateString) {
                if (!dateString) return 'No disponible';
                const options = { year: 'numeric', month: 'long', day: 'numeric' };
                return new Date(dateString).toLocaleDateString('es-ES', options);
            }

            // Función para crear la sección de audios y subtítulos
            function createAudioSubtitlesSection(audiosCount, subtitlesCount, audioList, subtitleList) {
                let audioContent = '';
                let subtitleContent = '';
                
                if (audioList.length > 0) {
                    audioContent = `
                        <div class="audio-subtitles-item" onclick="this.classList.toggle('expanded')">
                            <i class="fas fa-volume-up"></i>
                            <span>Audios (${audiosCount})</span>
                            <div class="expandable-content">
                                ${audioList.map(audio => `<div>· ${audio}</div>`).join('')}
                            </div>
                        </div>
                    `;
                }
                
                if (subtitleList.length > 0) {
                    subtitleContent = `
                        <div class="audio-subtitles-item" onclick="this.classList.toggle('expanded')">
                            <i class="fas fa-closed-captioning"></i>
                            <span>Subtítulos (${subtitlesCount})</span>
                            <div class="expandable-content">
                                ${subtitleList.map(sub => `<div>· ${sub}</div>`).join('')}
                            </div>
                        </div>
                    `;
                }
                
                if (audioContent || subtitleContent) {
                    return `
                        <div class="audio-subtitles-info">
                            ${audioContent}
                            ${audioContent && subtitleContent ? '<span class="details-modal-meta-separator">•</span>' : ''}
                            ${subtitleContent}
                        </div>
                    `;
                }
                
                return '';
            }

            function generateDownloadUrl(videoUrl) {
                if (!videoUrl) return '#';
                
                if (videoUrl.includes('?') || videoUrl.includes('#')) {
                    return videoUrl + '&dl=1';
                }
                
                return videoUrl + '?dl=1';
            }

            // Función para mostrar el modal de compartir
            function showShareModal(item) {
                if (!item) return;
                
                // Crear URL de compartir
                const normalizedTitle = normalizeText(item.title);
                currentShareUrl = `${window.location.origin}${window.location.pathname}#id=${item.id}&title=${normalizeText(item.title)}`;
                
                // Actualizar elementos del modal
                sharePreviewImage.src = item.posterUrl;
                sharePreviewImage.onerror = function() {
                    this.src = 'https://via.placeholder.com/194x271';
                };
                
                sharePreviewTitle.textContent = item.title;
                
                // Limitar la descripción a 120 caracteres con puntos suspensivos
                const maxLength = 120;
                let description = item.description || 'Descripción no disponible';
                if (description.length > maxLength) {
                    description = description.substring(0, maxLength) + '...';
                }
                sharePreviewDescription.textContent = description;
                
                shareLinkInput.value = currentShareUrl;
                
                // Actualizar metatags para compartir
                updateMetaTags(item);
                
                // Mostrar el modal
                shareModalOverlay.style.display = 'flex';
                document.body.style.overflow = 'hidden';
                
                setTimeout(() => {
                    shareModalContent.style.opacity = '1';
                    shareModalContent.style.transform = 'translateY(0)';
                }, 10);
            }

            // Función para compartir en redes sociales
            function shareOnSocial(network) {
                if (!currentShareUrl || !activeItem) return;
                
                const title = `Mira ${activeItem.title} en nuestra plataforma`;
                const text = `${activeItem.title}: ${activeItem.description ? activeItem.description.substring(0, 100) + '...' : 'Una gran película que no te puedes perder'}`;
                const imageUrl = activeItem.posterUrl || 'https://via.placeholder.com/194x271';
                
                let shareUrl = '';
                
                switch(network) {
                    case 'facebook':
                        shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentShareUrl)}`;
                        break;
                    case 'twitter':
                        shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(title)}&url=${encodeURIComponent(currentShareUrl)}`;
                        break;
                    case 'whatsapp':
                        shareUrl = `https://wa.me/?text=${encodeURIComponent(title + ' ' + currentShareUrl)}`;
                        break;
                    case 'telegram':
                        shareUrl = `https://t.me/share/url?url=${encodeURIComponent(currentShareUrl)}&text=${encodeURIComponent(title)}`;
                        break;
                    default:
                        return;
                }
                
                window.open(shareUrl, '_blank', 'width=600,height=400');
            }

            // Función para copiar el enlace de compartir
            function copyShareLink() {
                if (!currentShareUrl) return;
                
                shareLinkInput.select();
                document.execCommand('copy');
                
                // Mostrar feedback
                const originalText = shareLinkButton.textContent;
                shareLinkButton.textContent = '¡Copiado!';
                shareLinkButton.style.backgroundColor = '#4CAF50';
                
                setTimeout(() => {
                    shareLinkButton.textContent = originalText;
                    shareLinkButton.style.backgroundColor = '';
                }, 2000);
            }

            async function showDetailsModal(item, itemElement) {
                isDetailsModalOpen = true;
                updateUrlForModal(item);
                
                detailsModalBody.innerHTML = `
                    <div style="display:flex; justify-content:center; align-items:center; height:100%;">
                        <div class="skeleton-spinner"></div>
                    </div>
                `;
                
                detailsModalOverlay.style.display = 'block';
                document.body.style.overflow = 'hidden';
                
                if (isIOS()) {
                    iosHelper.offsetHeight;
                    detailsModalContent.style.display = 'none';
                    setTimeout(() => {
                        detailsModalContent.style.display = 'block';
                    }, 50);
                }

                let tmdbData = null;
                if (item.tmdbUrl) {
                    tmdbData = await fetchTMDBData(item.tmdbUrl);
                }
                
                // Obtener imágenes de TMDB para la galería
                let tmdbImages = { posters: [], backdrops: [] };
                if (item.tmdbUrl) {
                    tmdbImages = await fetchTMDBImages(item.tmdbUrl);
                }
                
                // Priorizar imágenes de data.json
                const backdropUrl = item.backgroundUrl || (tmdbImages.backdrops[0]?.file_path || item.posterUrl);
                
                detailsModalBackdrop.src = backdropUrl;
                detailsModalBackdrop.onerror = function() {
                    this.src = 'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg';
                };
                
                const trailerUrl = item.trailerUrl || (tmdbData?.trailer_url || '');
                
                let metaItems = [];
                
                if (item.year) metaItems.push(`<span class="details-modal-meta-item">${item.year}</span>`);
                
                if (item.duration) metaItems.push(`<span class="details-modal-meta-item">${item.duration}</span>`);
                
                if (item.genre) metaItems.push(`<span class="details-modal-meta-item">${item.genre}</span>`);
                
                const ageRating = tmdbData?.certification || item.ageRating;
                if (ageRating) metaItems.push(`<span class="details-modal-meta-item"> <span class="age-rating">${ageRating}</span></span>`);
                
                if (item.rating) metaItems.push(`
                    <span class="details-modal-meta-item rating">
                        <i class="fas fa-star"></i> ${item.rating}
                        ${item.tmdbUrl ? `<img src="https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg" class="details-modal-tmdb-logo" alt="TMDB" onclick="window.open('${item.tmdbUrl}', '_blank')">` : ''}
                    </span>
                `);
                
                const audioSubtitlesSection = createAudioSubtitlesSection(item.audiosCount, item.subtitlesCount, item.audioList, item.subtitleList);
                
                let actionButtons = '';
                
                if (item.videoUrl) {
                    actionButtons += `
                        <button class="details-modal-action-btn primary" data-video-url="${item.videoUrl}">
                            <i class="fas fa-play"></i>
                            <span>Ver Película</span>
                            <span class="tooltip">Reproducir</span>
                        </button>
                    `;
                }
                
                if (item.videoUrl) {
                    actionButtons += `
                        <button class="details-modal-action-btn circular" onclick="window.open('${generateDownloadUrl(item.videoUrl)}', '_blank')">
                            <i class="fas fa-download"></i>
                            <span class="tooltip">Descargar</span>
                        </button>
                    `;
                }
                
                if (trailerUrl) {
                    actionButtons += `
                        <button class="details-modal-action-btn circular" data-video-url="${trailerUrl}">
                            <i class="fas fa-film"></i>
                            <span class="tooltip">Ver Tráiler</span>
                        </button>
                    `;
                }
                
                // Botón para compartir
                actionButtons += `
                    <button class="details-modal-action-btn circular" id="share-button">
                        <i class="fas fa-share-alt"></i>
                        <span class="tooltip">Compartir</span>
                    </button>
                `;
                
                let infoItems = '';
                
                if (tmdbData?.original_title && tmdbData.original_title.toLowerCase() !== item.title.toLowerCase()) {
                    infoItems += `
                        <div class="details-modal-info-item">
                            <div class="details-modal-info-label">Título original</div>
                            <div class="details-modal-info-value">${tmdbData.original_title}</div>
                        </div>
                    `;
                }
                
                if (item.year) {
                    infoItems += `
                        <div class="details-modal-info-item">
                            <div class="details-modal-info-label">Año</div>
                            <div class="details-modal-info-value">${item.year}</div>
                        </div>
                    `;
                }
                
                if (item.duration) {
                    infoItems += `
                        <div class="details-modal-info-item">
                            <div class="details-modal-info-label">Duración</div>
                            <div class="details-modal-info-value">${item.duration}</div>
                        </div>
                    `;
                }
                
                if (item.genre) {
                    infoItems += `
                        <div class="details-modal-info-item">
                            <div class="details-modal-info-label">Género</div>
                            <div class="details-modal-info-value">${item.genre}</div>
                        </div>
                    `;
                }
                
                if (ageRating) {
                    infoItems += `
                        <div class="details-modal-info-item">
                            <div class="details-modal-info-label">Clasificación</div>
                            <div class="details-modal-info-value"> <span class="age-rating">${ageRating}</span></div>
                        </div>
                    `;
                }
                
                if (tmdbData?.production_companies) {
                    infoItems += `
                        <div class="details-modal-info-item">
                            <div class="details-modal-info-label">Productora(s)</div>
                            <div class="details-modal-info-value">${tmdbData.production_companies}</div>
                        </div>
                    `;
                }
                
                if (tmdbData?.production_countries) {
                    infoItems += `
                        <div class="details-modal-info-item">
                            <div class="details-modal-info-label">País(es)</div>
                            <div class="details-modal-info-value">${tmdbData.production_countries}</div>
                        </div>
                    `;
                }
                
                if (tmdbData?.status) {
                    infoItems += `
                        <div class="details-modal-info-item">
                            <div class="details-modal-info-label">Estado</div>
                            <div class="details-modal-info-value">${tmdbData.status}</div>
                        </div>
                    `;
                }
                
                if (tmdbData?.spoken_languages) {
                    infoItems += `
                        <div class="details-modal-info-item">
                            <div class="details-modal-info-label">Idioma(s) original(es)</div>
                            <div class="details-modal-info-value">${tmdbData.spoken_languages}</div>
                        </div>
                    `;
                }
                
                let taglineSection = '';
                if (tmdbData?.tagline) {
                    taglineSection = `
                        <div class="details-modal-tagline">"${tmdbData.tagline}"</div>
                    `;
                }
                
                const description = item.description || (tmdbData?.overview || 'Descripción no disponible');
                
                const directorsSection = tmdbData?.directors?.length > 0 ? createCrewSection(tmdbData.directors, 'Director(es)') : '';
                const writersSection = tmdbData?.writers?.length > 0 ? createCrewSection(tmdbData.writers, 'Escritor(es)') : '';
                const castSection = tmdbData?.cast?.length > 0 ? createCastSection(tmdbData.cast) : '';
                
                const posters = tmdbImages.posters;
                const backdrops = tmdbImages.backdrops;
                
                const postersGallery = posters.length > 0 ? createGallerySkeleton('poster', 5) : '';
                const backdropsGallery = backdrops.length > 0 ? createGallerySkeleton('backdrop', 4) : '';
                
                detailsModalBody.innerHTML = `
                    <h1 class="details-modal-title">${item.title}</h1>
                    
                    ${tmdbData?.original_title && tmdbData.original_title.toLowerCase() !== item.title.toLowerCase() ? `
                        <div class="details-modal-original-title">${tmdbData.original_title}</div>
                    ` : ''}
                    
                    <div class="details-modal-meta">
                        ${metaItems.join('<span class="details-modal-meta-separator">•</span>')}
                    </div>
                    
                    ${audioSubtitlesSection}
                    
                    ${actionButtons ? `
                    <div class="details-modal-actions">
                        ${actionButtons}
                    </div>
                    ` : ''}
                    
                    ${taglineSection}
                    
                    <div class="details-modal-description">
                        ${description}
                    </div>
                    
                    <div class="details-modal-info">
                        ${infoItems}
                    </div>
                    
                    ${directorsSection}
                    ${writersSection}
                    ${castSection}
                    
                    ${postersGallery}
                    ${backdropsGallery}
                    
                    ${item.link ? `<a href="${item.link}" class="details-modal-action-btn secondary" style="margin-top:20px;text-align:center;text-decoration:none;">
                        <i class="fas fa-info-circle"></i>
                        <span>Más información</span>
                    </a>` : ''}
                `;
                
                void detailsModalOverlay.offsetWidth;
                
                detailsModalOverlay.style.opacity = '1';
                detailsModalContent.style.transform = 'translateY(0)';
                detailsModalContent.style.opacity = '1';
                
                setTimeout(() => {
                    if (posters.length > 0) {
                        const postersSection = createGallerySection(posters, 'Carteles', 'posters');
                        const postersContainer = detailsModalBody.querySelector('.details-modal-gallery-section:has(.gallery-skeleton)');
                        if (postersContainer) {
                            postersContainer.outerHTML = postersSection;
                        }
                    }
                    
                    if (backdrops.length > 0) {
                        const backdropsSection = createGallerySection(backdrops, 'Imágenes de fondo', 'backdrops');
                        const backdropsContainer = detailsModalBody.querySelectorAll('.details-modal-gallery-section:has(.gallery-skeleton)')[1] || 
                                                   detailsModalBody.querySelector('.details-modal-gallery-section:has(.gallery-skeleton)');
                        if (backdropsContainer) {
                            backdropsContainer.outerHTML = backdropsSection;
                        }
                    }
                    
                    document.querySelectorAll('.details-modal-action-btn[data-video-url]').forEach(btn => {
                        btn.addEventListener('click', (e) => {
                            e.stopPropagation();
                            const videoUrl = btn.getAttribute('data-video-url');
                            showVideoModal(videoUrl);
                        });
                    });
                    
                    document.querySelectorAll('.details-modal-gallery-item').forEach(item => {
                        item.addEventListener('click', (e) => {
                            const galleryType = item.getAttribute('data-gallery-type');
                            const showMore = item.getAttribute('data-show-more');
                            const index = parseInt(item.getAttribute('data-index') || 0);
                            const images = galleryType === 'posters' ? posters : backdrops;
                            
                            if (showMore === 'true') {
                                showGalleryImageModal(images, 0);
                            } else if (images && images.length > 0) {
                                showGalleryImageModal(images, index);
                            }
                        });
                    });
                }, 100);
                
                if (isIOS()) {
                    detailsModalContent.style.animation = 'none';
                    requestAnimationFrame(() => {
                        detailsModalContent.style.animation = 'iosModalIn 0.4s ease-out forwards';
                    });
                }
                
                activeItem = item;
            }

            async function showModal(item, itemElement) {
                isModalOpen = true;
                
                // Priorizar imágenes de data.json
                const backdropUrl = item.backgroundUrl || item.posterUrl;
                
                modalBackdrop.src = backdropUrl;
                modalBackdrop.onerror = function() {
                    this.src = 'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg';
                };
                
                const trailerUrl = item.trailerUrl;
                
                let metaItems = [];
                
                if (item.year) metaItems.push(`<span>${item.year}</span>`);
                
                if (item.duration) metaItems.push(`<span>${item.duration}</span>`);
                
                if (item.genre) metaItems.push(`<span>${item.genre}</span>`);
                
                if (item.ageRating) metaItems.push(`<span class="age-rating">${item.ageRating}</span>`);
                
                if (item.rating) metaItems.push(`
                    <div class="rating">
                        <i class="fas fa-star"></i>
                        <span>${item.rating}</span>
                    </div>
                `);
                
                let actionButtons = '';
                
                if (item.videoUrl) {
                    actionButtons += `
                        <button class="modal-action-btn" data-video-url="${item.videoUrl}">
                            <i class="fas fa-play"></i>
                            <span>Ver Película</span>
                        </button>
                        <button class="modal-action-btn" onclick="window.open('${generateDownloadUrl(item.videoUrl)}', '_blank')">
                            <i class="fas fa-download"></i>
                            <span>Descargar</span>
                        </button>
                    `;
                }
                
                if (trailerUrl) {
                    actionButtons += `
                        <button class="modal-action-btn" data-video-url="${trailerUrl}">
                            <i class="fas fa-film"></i>
                            <span>Ver Tráiler</span>
                        </button>
                    `;
                }
                
                modalBody.innerHTML = `
                    <h2>${item.title}</h2>
                    <div class="meta-info">
                        ${metaItems.join('')}
                    </div>
                    <p class="description">${item.description}</p>
                    ${actionButtons ? `<div class="modal-actions">${actionButtons}</div>` : ''}
                    <a href="${item.link}" style="display:inline-block;margin-top:15px;padding:8px 15px;background:var(--primary-color);color:white;text-decoration:none;border-radius:4px;">Más información</a>
                `;
                
                const position = calculateModalPosition(itemElement);
                
                modalContent.style.left = `${position.left}px`;
                modalContent.style.top = `${position.top}px`;
                modalContent.style.transform = 'translate(-50%, -50%) scale(0.9)';
                
                modalOverlay.style.display = 'block';
                
                void modalContent.offsetWidth;
                
                modalContent.style.opacity = '1';
                modalContent.style.transform = 'translate(-50%, -50%) scale(1)';
                
                modalContent.addEventListener('mouseleave', () => {
                    if (!window.matchMedia("(max-width: 768px)").matches) {
                        closeModal();
                    }
                });
                
                document.querySelectorAll('.modal-action-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        const videoUrl = btn.getAttribute('data-video-url');
                        showVideoModal(videoUrl);
                    });
                });
                
                modalContent.addEventListener('click', (e) => {
                    e.stopPropagation();
                    if (!window.matchMedia("(max-width: 768px)").matches) {
                        closeModal();
                        showDetailsModal(item, itemElement);
                    }
                });
                
                activeItem = item;
            }

            async function renderItems() {
                const end = Math.min(index + step, moviesData.length);
                
                for (let i = index; i < end; i++) {
                    const item = moviesData[i];
                    const div = document.createElement("div");
                    div.className = "custom-carousel-item";
                    div.dataset.itemId = i;

                    const metaInfo = [];
                    if (item.year) metaInfo.push(`<span>${item.year}</span>`);
                    if (item.duration) metaInfo.push(`<span>${item.duration}</span>`);
                    if (item.genre) metaInfo.push(`<span>${item.genre}</span>`);
                    if (item.rating) metaInfo.push(`<div class="carousel-rating"><i class="fas fa-star"></i><span>${item.rating}</span></div>`);
                    if (item.ageRating) metaInfo.push(`<span class="age-rating">${item.ageRating}</span>`);

                    let posterUrl = item.posterUrl;
                    // Intentar obtener de TMDB si no hay portada
                    if ((!posterUrl || posterUrl.includes('placeholder')) && item.tmdbUrl) {
                        posterUrl = await fetchTMDBPoster(item.tmdbUrl) || item.posterUrl;
                    }
                    // Usar placeholder si no hay imagen
                    if (!posterUrl) {
                        posterUrl = 'https://via.placeholder.com/194x271';
                    }

                    div.innerHTML = `
                        <div class="loader"><i class="fas fa-spinner"></i></div>
                        <div class="poster-container">
                            <img class="poster-image" src="${posterUrl}" alt="${item.title}" onload="this.parentElement.previousElementSibling.style.display='none'; this.style.opacity='1'" style="opacity:0;transition:opacity 0.3s ease">
                        </div>
                        <img class="detail-background" src="${item.backgroundUrl || posterUrl}" alt="${item.title} - Background" loading="lazy" style="display:none">
                        <div class="carousel-overlay">
                            <div class="carousel-title">${item.title}</div>
                            ${metaInfo.length ? `<div class="carousel-meta">${metaInfo.join('')}</div>` : ''}
                            ${item.description ? `<div class="carousel-description">${item.description}</div>` : ''}
                        </div>
                    `;

                    if (window.matchMedia("(hover: hover) and (pointer: fine)").matches) {
                        div.addEventListener('mouseenter', function(e) {
                            const itemId = this.dataset.itemId;
                            
                            if (hoverTimeouts[itemId]) {
                                clearTimeout(hoverTimeouts[itemId].details);
                                clearTimeout(hoverTimeouts[itemId].modal);
                            }
                            
                            const rect = this.getBoundingClientRect();
                            hoverModalOrigin = {
                                x: rect.left + rect.width / 2,
                                y: rect.top + rect.height / 2
                            };
                            
                            hoverTimeouts[itemId] = {
                                details: setTimeout(() => {
                                    const background = this.querySelector('.detail-background');
                                    const overlay = this.querySelector('.carousel-overlay');
                                    background.style.display = 'block';
                                    background.style.opacity = '1';
                                    overlay.style.opacity = '1';
                                    overlay.style.transform = 'translateY(0)';
                                    
                                    hoverTimeouts[itemId].modal = setTimeout(() => {
                                        if (!isModalOpen && !isDetailsModalOpen) {
                                            hoverModalItem = this;
                                            showModal(item, this);
                                        }
                                    }, 200);
                                }, 900)
                            };
                        });

                        div.addEventListener('mouseleave', function() {
                            const itemId = this.dataset.itemId;
                            
                            if (hoverTimeouts[itemId]) {
                                clearTimeout(hoverTimeouts[itemId].details);
                                clearTimeout(hoverTimeouts[itemId].modal);
                                delete hoverTimeouts[itemId];
                            }
                            
                            const poster = this.querySelector('.poster-image');
                            const background = this.querySelector('.detail-background');
                            const overlay = this.querySelector('.carousel-overlay');
                            
                            poster.style.opacity = '1';
                            background.style.opacity = '0';
                            overlay.style.opacity = '0';
                            overlay.style.transform = 'translateY(20px)';
                            
                            setTimeout(() => {
                                background.style.display = 'none';
                            }, 300);
                        });
                    }

                    div.addEventListener('click', (e) => {
                        e.preventDefault();
                        const itemId = div.dataset.itemId;
                        if (hoverTimeouts[itemId]) {
                            clearTimeout(hoverTimeouts[itemId].details);
                            clearTimeout(hoverTimeouts[itemId].modal);
                        }
                        showDetailsModal(item, div);
                    });

                    wrapper.appendChild(div);
                }

                index = end;

                if (index >= moviesData.length && !moreAppended) {
                    moreAppended = true;
                    const moreLink = document.createElement("a");
                    moreLink.href = "#";
                    moreLink.className = "custom-carousel-more";
                    moreLink.innerHTML = `
                        <i class="fas fa-arrow-right"></i>
                        <span>Ver más</span>
                    `;
                    wrapper.appendChild(moreLink);
                }

                updateProgressBar();
            }

            function closeModal() {
                if (hoverModalTimeout) {
                    clearTimeout(hoverModalTimeout);
                }
                
                modalContent.style.opacity = '0';
                modalContent.style.transform = 'translate(-50%, -50%) scale(0.9)';
                
                setTimeout(() => {
                    modalOverlay.style.display = 'none';
                    isModalOpen = false;
                    activeItem = null;
                    hoverModalItem = null;
                }, 150);
            }

            function closeDetailsModal() {
                detailsModalContent.style.transform = 'translateY(20px)';
                detailsModalContent.style.opacity = '0';
                detailsModalOverlay.style.opacity = '0';
                
                setTimeout(() => {
                    detailsModalOverlay.style.display = 'none';
                    document.body.style.overflow = 'auto';
                    isDetailsModalOpen = false;
                    activeItem = null;
                    restoreUrl();
                }, 300);
            }

            function closeVideoModal() {
                videoIframe.src = '';
                videoModalOverlay.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
            
            function closeShareModal() {
                shareModalContent.style.opacity = '0';
                shareModalContent.style.transform = 'translateY(20px)';
                
                setTimeout(() => {
                    shareModalOverlay.style.display = 'none';
                    document.body.style.overflow = 'auto';
                }, 300);
            }

            function updateProgressBar() {
                const scrollPercentage = (wrapper.scrollLeft / (wrapper.scrollWidth - wrapper.clientWidth)) * 100;
                progressBar.style.width = `${scrollPercentage}%`;
            }

            async function initCarousel() {
                skeleton.style.display = 'flex';
                wrapper.style.display = 'none';
                
                try {
                    const response = await fetch(DATA_URL, {
                        method: 'GET',
                        headers: { 'Accept': 'application/json' }
                    });
                    
                    if (!response.ok) {
                        throw new Error('No se pudo cargar data.json');
                    }
                    
                    const data = await response.json();
                    
                    // Filtrar solo películas y mapear datos
                    moviesData = data
                        .filter(item => item['Categoría'] === 'Películas')
                        .map((item, index) => ({
                            id: index.toString(),
                            title: item['Título'] || 'Sin título',
                            description: item['Synopsis'] || 'Descripción no disponible',
                            posterUrl: item['Portada'] || '',
                            backgroundUrl: item['Fondo'] || '',
                            year: item['Año'] ? item['Año'].toString() : '',
                            duration: item['Duración'] || '',
                            genre: item['Géneros'] || '',
                            rating: item['Puntuación 1-10'] ? item['Puntuación 1-10'].toString() : '',
                            ageRating: item['Clasificación'] || '',
                            link: item['Enlace'] || '#',
                            trailerUrl: item['Trailer'] || '',
                            videoUrl: item['Video iframe'] || '',  // Nuevo campo
                            tmdbUrl: item['TMDB'] || '',
                            audiosCount: item['Audios'] ? item['Audios'].split(',').length : 0,
                            subtitlesCount: item['Subtítulos'] ? item['Subtítulos'].split(',').length : 0,
                            audioList: item['Audios'] ? item['Audios'].split(',') : [],
                            subtitleList: item['Subtítulos'] ? item['Subtítulos'].split(',') : []
                        }));

                    if (moviesData.length === 0) {
                        // Mostrar datos de ejemplo si no hay películas
                        moviesData = [
                            {
                                id: "12345",
                                title: "Ejemplo de película",
                                description: "Esta es una película de ejemplo que se muestra cuando no se pueden cargar los datos reales.",
                                posterUrl: "https://via.placeholder.com/194x271",
                                backgroundUrl: "https://via.placeholder.com/194x271",
                                year: "2023",
                                duration: "120 min",
                                genre: "Acción",
                                rating: "8.5",
                                ageRating: "16",
                                link: "#",
                                trailerUrl: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
                                videoUrl: "https://ejemplo.com/video.mp4",
                                tmdbUrl: "https://www.themoviedb.org/movie/12345",
                                audiosCount: 1,
                                subtitlesCount: 1,
                                audioList: ["Español"],
                                subtitleList: ["Español"]
                            }
                        ];
                    }

                    renderItems();
                    showCarousel();
                    openModalFromUrl();
                } catch (error) {
                    console.error('Error cargando datos:', error);
                    // Mostrar datos de ejemplo si hay error
                    moviesData = [
                        {
                            id: "12345",
                            title: "Ejemplo de película",
                            description: "Esta es una película de ejemplo que se muestra cuando no se pueden cargar los datos reales.",
                            posterUrl: "https://via.placeholder.com/194x271",
                            backgroundUrl: "https://via.placeholder.com/194x271",
                            year: "2023",
                            duration: "120 min",
                            genre: "Acción",
                            rating: "8.5",
                            ageRating: "16",
                            link: "#",
                            trailerUrl: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
                            videoUrl: "https://ejemplo.com/video.mp4",
                            tmdbUrl: "https://www.themoviedb.org/movie/12345",
                            audiosCount: 1,
                            subtitlesCount: 1,
                            audioList: ["Español"],
                            subtitleList: ["Español"]
                        }
                    ];
                    renderItems();
                    showCarousel();
                }
            }
            
            // Event listeners para los botones de compartir
            document.addEventListener('click', function(e) {
                // Botón de compartir en el modal de detalles
                if (e.target.closest('#share-button')) {
                    showShareModal(activeItem);
                }
                
                // Botones de redes sociales
                if (e.target.closest('#share-facebook')) {
                    shareOnSocial('facebook');
                }
                if (e.target.closest('#share-twitter')) {
                    shareOnSocial('twitter');
                }
                if (e.target.closest('#share-whatsapp')) {
                    shareOnSocial('whatsapp');
                }
                if (e.target.closest('#share-telegram')) {
                    shareOnSocial('telegram');
                }
                if (e.target.closest('#share-link')) {
                    copyShareLink();
                }
            });
            
            // Event listener para el botón de cerrar el modal de compartir
            document.getElementById('share-modal-close').addEventListener('click', function(e) {
                e.preventDefault();
                closeShareModal();
            });

            // Event listener para el botón copiar
            shareLinkButton.addEventListener('click', copyShareLink);

            // Event listeners para los botones de navegación
            carouselPrev.addEventListener('click', scrollToPrevPage);
            carouselNext.addEventListener('click', scrollToNextPage);

            // Event listeners para otros elementos
            modalOverlay.addEventListener('click', (e) => {
                if (e.target === modalOverlay) {
                    closeModal();
                }
            });

            detailsModalOverlay.addEventListener('click', (e) => {
                if (e.target === detailsModalOverlay) {
                    closeDetailsModal();
                }
            });

            videoModalOverlay.addEventListener('click', (e) => {
                if (e.target === videoModalOverlay) {
                    closeVideoModal();
                }
            });

            galleryImageModal.addEventListener('click', (e) => {
                if (e.target === galleryImageModal) {
                    closeGalleryImageModal();
                }
            });

            shareModalOverlay.addEventListener('click', (e) => {
                if (e.target === shareModalOverlay) {
                    closeShareModal();
                }
            });

            detailsModalClose.addEventListener('click', (e) => {
                e.stopPropagation();
                closeDetailsModal();
            });

            videoModalClose.addEventListener('click', (e) => {
                e.stopPropagation();
                closeVideoModal();
            });

            galleryImageModalClose.addEventListener('click', (e) => {
                e.stopPropagation();
                closeGalleryImageModal();
            });

            shareModalClose.addEventListener('click', (e) => {
                e.stopPropagation();
                closeShareModal();
            });

            galleryImageModalPrev.addEventListener('click', (e) => {
                e.stopPropagation();
                navigateGallery('prev');
            });

            galleryImageModalNext.addEventListener('click', (e) => {
                e.stopPropagation();
                navigateGallery('next');
            });

            shareLinkButton.addEventListener('click', copyShareLink);

            wrapper.addEventListener("scroll", function () {
                updateProgressBar();
                
                if (wrapper.scrollLeft + wrapper.clientWidth >= wrapper.scrollWidth - 200) {
                    renderItems();
                }
            });

            // Recalcular items por página cuando cambia el tamaño de la ventana
            window.addEventListener('resize', calculateItemsPerPage);

            // Manejar el evento popstate (cuando el usuario navega hacia atrás/adelante)
            window.addEventListener('popstate', function() {
                if (isDetailsModalOpen) {
                    closeDetailsModal();
                }
            });

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const item = entry.target;
                        const poster = item.querySelector('.poster-image');
                        const background = item.querySelector('.detail-background');
                        
                        if (poster && !poster.loaded) {
                            poster.loaded = true;
                            poster.src = poster.src;
                        }
                        
                        if (background && !background.loaded) {
                            background.loaded = true;
                            background.src = background.src;
                        }
                    }
                });
            }, { root: wrapper, threshold: 0.1 });

            // Inicializar el carrusel
            initCarousel();

            // Manejo específico para iOS - Solución mejorada para hashchange
            if (isIOS()) {
                // Verificar hash al cargar la página
                window.addEventListener('load', function() {
                    setTimeout(openModalFromUrl, 1000); // Mayor tiempo de espera para iOS
                });
                
                // Manejar cambios en el hash
                let lastHash = window.location.hash;
                window.addEventListener('hashchange', function() {
                    const newHash = window.location.hash;
                    if (newHash !== lastHash) {
                        lastHash = newHash;
                        setTimeout(openModalFromUrl, 300);
                    }
                });
            }

            // Hacer las funciones accesibles globalmente
            window.generateDownloadUrl = generateDownloadUrl;
            window.showShareModal = showShareModal;
            window.shareOnSocial = shareOnSocial;
            window.copyShareLink = copyShareLink;
        });
    </script>
</body>
</html>