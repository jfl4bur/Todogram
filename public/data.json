import fs from 'fs';
import path from 'path';
import axios from 'axios';
import { Client } from '@notionhq/client';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import dotenv from 'dotenv';

// Cargar variables de entorno
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const notion = new Client({ auth: process.env.NOTION_API_KEY });
const databaseId = process.env.NOTION_DATABASE_ID;
const tmdbApiKey = process.env.TMDB_API_KEY;

// Limites de la API de Notion: 3 requests por segundo (333ms entre requests)
const NOTION_RATE_LIMIT = 350; // Un poco m√°s conservador
// TMDB permite 40 requests por 10 segundos (250ms entre requests)
const TMDB_RATE_LIMIT = 300;

const delay = (ms) => new Promise((res) => setTimeout(res, ms));
const now = () => new Date().toISOString().replace('T', ' ').substring(0, 19);

// Funci√≥n helper para verificar si un valor est√° vac√≠o
const isEmpty = (value) => {
  return value === null || value === undefined || value === '' || 
         (Array.isArray(value) && value.length === 0) ||
         (typeof value === 'string' && value.trim() === '');
};

// Funciones mejoradas para extraer datos de Notion
const getText = (property) => {
  if (!property) return '';
  
  // Rich text
  if (property.rich_text && property.rich_text.length > 0) {
    return property.rich_text.map(text => text.plain_text).join('');
  }
  
  // Title
  if (property.title && property.title.length > 0) {
    return property.title.map(text => text.plain_text).join('');
  }
  
  // Plain text
  if (property.plain_text) {
    return property.plain_text;
  }
  
  return '';
};

const getNumber = (property) => {
  if (!property) return '';
  if (property.number !== null && property.number !== undefined) {
    return property.number.toString();
  }
  return '';
};

const getSelect = (property) => {
  if (!property) return '';
  if (property.select && property.select.name) {
    return property.select.name;
  }
  return '';
};

const getMultiSelect = (property) => {
  if (!property) return '';
  if (property.multi_select && Array.isArray(property.multi_select)) {
    return property.multi_select.map(item => item.name).join(', ');
  }
  return '';
};

const getDate = (property) => {
  if (!property) return '';
  if (property.date && property.date.start) {
    return property.date.start;
  }
  return '';
};

const getFileUrl = (property) => {
  if (!property || !property.files || !Array.isArray(property.files)) return '';
  const file = property.files.find((f) => f.type === 'external' || f.type === 'file');
  return file?.external?.url || file?.file?.url || '';
};

const getUrl = (property) => {
  if (!property) return '';
  if (property.url) {
    return property.url;
  }
  return '';
};

const logProgress = (count, total, status) => {
  const percent = Math.floor((count / total) * 100);
  const filled = Math.floor(percent / 5);
  
  const filledBar = '‚ñà'.repeat(filled);
  const emptyBar = '‚ñë'.repeat(20 - filled);
  const bar = `\x1b[38;5;27m${filledBar}\x1b[38;5;75m${emptyBar}\x1b[0m`;
  
  const movieTitle = status.replace('Procesando: ', '');
  const truncatedTitle = movieTitle.substring(0, 35);
  const paddedTitle = truncatedTitle.padEnd(40, ' ');
  
  const percentText = `\x1b[1m\x1b[36m${percent.toString().padStart(3, ' ')}%\x1b[0m`;
  
  const progressLine = `  ‚ïë ${bar} ‚ïë ${percentText} ‚îÇ \x1b[1m\x1b[32m${paddedTitle}\x1b[0m`;
  
  process.stdout.write(`\r${progressLine}`);
};

// Cache para datos de TMDB para evitar requests duplicados
const tmdbCache = new Map();

async function fetchTMDBDetails(tmdbId, title) {
  const cacheKey = tmdbId || title;
  
  if (tmdbCache.has(cacheKey)) {
    return tmdbCache.get(cacheKey);
  }

  let endpoint = tmdbId
    ? `https://api.themoviedb.org/3/movie/${tmdbId}?api_key=${tmdbApiKey}&language=es-ES&append_to_response=videos,credits`
    : `https://api.themoviedb.org/3/search/movie?query=${encodeURIComponent(title)}&api_key=${tmdbApiKey}&language=es-ES`;

  try {
    await delay(TMDB_RATE_LIMIT); // Rate limiting para TMDB
    
    const res = await axios.get(endpoint);
    let movieData = null;
    
    if (tmdbId) {
      movieData = res.data;
    } else {
      const found = res.data.results?.[0];
      if (!found) {
        tmdbCache.set(cacheKey, null);
        return null;
      }
      
      await delay(TMDB_RATE_LIMIT);
      const detailRes = await axios.get(`https://api.themoviedb.org/3/movie/${found.id}?api_key=${tmdbApiKey}&language=es-ES&append_to_response=videos,credits`);
      movieData = detailRes.data;
    }
    
    tmdbCache.set(cacheKey, movieData);
    return movieData;
  } catch (error) {
    console.error(`Error fetching TMDB data for ${cacheKey}:`, error.message);
    tmdbCache.set(cacheKey, null);
    return null;
  }
}

async function getAllPages() {
  let results = [];
  let cursor;
  let batchCount = 0;
  
  console.log('\x1b[1m\x1b[34müöÄ Iniciando extracci√≥n optimizada de datos de Notion...\x1b[0m');
  
  do {
    batchCount++;
    console.log(`\x1b[1m\x1b[36müì¶ Obteniendo lote ${batchCount} (100 entradas por lote)...\x1b[0m`);
    
    const res = await notion.databases.query({
      database_id: databaseId,
      start_cursor: cursor,
      page_size: 100,
    });
    
    results = [...results, ...res.results];
    cursor = res.has_more ? res.next_cursor : null;
    
    console.log(`\x1b[32m‚úÖ Lote ${batchCount} completado: +${res.results.length} entradas (Total: ${results.length})\x1b[0m`);
    
    // Solo aplicar rate limiting si hay m√°s p√°ginas por obtener
    if (cursor) {
      await delay(NOTION_RATE_LIMIT);
    }
    
  } while (cursor);
  
  console.log(`\x1b[1m\x1b[33müéØ Extracci√≥n completada: ${results.length} entradas obtenidas en ${batchCount} lotes\x1b[0m\n`);
  return results;
}

function extractNotionData(properties) {
  return {
    titulo: getText(properties['T√≠tulo']),
    tmdbUrl: getUrl(properties['TMDB']),
    synopsis: getText(properties['Synopsis']),
    portada: getFileUrl(properties['Portada']),
    carteles: getFileUrl(properties['Carteles']),
    generos: getText(properties['G√©neros txt']), // Solo desde Notion
    a√±o: getText(properties['A√±o']) || getDate(properties['Fecha de lanzamiento'])?.split('-')[0],
    duracion: getText(properties['Duraci√≥n']),
    puntuacion: getText(properties['Puntuaci√≥n 1-10']) || getNumber(properties['Puntuaci√≥n 1-10']),
    trailer: getUrl(properties['Trailer']),
    verPelicula: getUrl(properties['Ver Pel√≠cula']),
    audios: getText(properties['Audios txt']),
    subtitulos: getText(properties['Subt√≠tulos txt']),
    tituloOriginal: getText(properties['T√≠tulo original']),
    productoras: getText(properties['Productora(s)']),
    idiomas: getText(properties['Idioma(s) original(es)']),
    paises: getText(properties['Pa√≠s(es)']),
    directores: getText(properties['Director(es)']),
    escritores: getText(properties['Escritor(es)']),
    reparto: getText(properties['Reparto principal']),
    categoria: getText(properties['Categor√≠as txt']),
    videoIframe: getUrl(properties['Video iframe']),
    videoIframe1: getUrl(properties['Video iframe 1'])
  };
}

// Funci√≥n mejorada que SIEMPRE prioriza Notion sobre TMDB
function mergeTMDBData(notionData, tmdbData) {
  if (!tmdbData) return notionData;
  
  // Extraer datos de TMDB solo para usar como respaldo
  const tmdbGenres = tmdbData.genres?.map(g => g.name).join(', ') || '';
  const tmdbDirectors = tmdbData.credits?.crew?.filter(c => c.job === 'Director').map(d => d.name).join(', ') || '';
  const tmdbWriters = tmdbData.credits?.crew?.filter(c => c.job === 'Screenplay' || c.job === 'Writer').map(w => w.name).join(', ') || '';
  const tmdbCast = tmdbData.credits?.cast?.slice(0, 5).map(c => c.name).join(', ') || '';
  const tmdbProductionCompanies = tmdbData.production_companies?.map(pc => pc.name).join(', ') || '';
  const tmdbCountries = tmdbData.production_countries?.map(pc => pc.name).join(', ') || '';
  const tmdbTrailer = tmdbData.videos?.results?.find(v => v.site === 'YouTube' && v.type === 'Trailer')?.key;
  
  return {
    // PRIORIDAD ABSOLUTA NOTION: Si Notion tiene datos, usar siempre Notion
    titulo: !isEmpty(notionData.titulo) ? notionData.titulo : (tmdbData.title || ''),
    tmdbId: notionData.tmdbUrl?.match(/\/movie\/(\d+)/)?.[1] || tmdbData.id?.toString() || '',
    tmdbUrl: !isEmpty(notionData.tmdbUrl) ? notionData.tmdbUrl : (tmdbData.id ? `https://www.themoviedb.org/movie/${tmdbData.id}` : ''),
    synopsis: !isEmpty(notionData.synopsis) ? notionData.synopsis : (tmdbData.overview || ''),
    portada: !isEmpty(notionData.portada) ? notionData.portada : (tmdbData.poster_path ? `https://image.tmdb.org/t/p/w500${tmdbData.poster_path}` : ''),
    carteles: !isEmpty(notionData.carteles) ? notionData.carteles : (tmdbData.backdrop_path ? `https://image.tmdb.org/t/p/w1280${tmdbData.backdrop_path}` : ''),
    
    // G√âNEROS: SOLO desde Notion (nunca desde TMDB)
    generos: notionData.generos || '', // Solo desde "G√©neros txt" de Notion
    
    a√±o: !isEmpty(notionData.a√±o) ? notionData.a√±o : (tmdbData.release_date?.split('-')[0] || ''),
    duracion: !isEmpty(notionData.duracion) ? notionData.duracion : (tmdbData.runtime ? `${Math.floor(tmdbData.runtime / 60)}h ${tmdbData.runtime % 60}m` : ''),
    puntuacion: !isEmpty(notionData.puntuacion) ? notionData.puntuacion : (tmdbData.vote_average ? Math.round(tmdbData.vote_average).toString() : ''),
    trailer: !isEmpty(notionData.trailer) ? notionData.trailer : (tmdbTrailer ? `https://www.youtube.com/watch?v=${tmdbTrailer}` : ''),
    
    // Campos que SOLO existen en Notion (nunca desde TMDB)
    verPelicula: notionData.verPelicula || '',
    audios: notionData.audios || '',
    subtitulos: notionData.subtitulos || '',
    categoria: notionData.categoria || '',
    videoIframe: notionData.videoIframe || '',
    videoIframe1: notionData.videoIframe1 || '',
    
    // Campos con respaldo de TMDB solo si Notion est√° vac√≠o
    tituloOriginal: !isEmpty(notionData.tituloOriginal) ? notionData.tituloOriginal : (tmdbData.original_title || ''),
    productoras: !isEmpty(notionData.productoras) ? notionData.productoras : tmdbProductionCompanies,
    idiomas: !isEmpty(notionData.idiomas) ? notionData.idiomas : (tmdbData.original_language || ''),
    paises: !isEmpty(notionData.paises) ? notionData.paises : tmdbCountries,
    directores: !isEmpty(notionData.directores) ? notionData.directores : tmdbDirectors,
    escritores: !isEmpty(notionData.escritores) ? notionData.escritores : tmdbWriters,
    reparto: !isEmpty(notionData.reparto) ? notionData.reparto : tmdbCast
  };
}

async function validateEnvironment() {
  const missingVars = [];
  
  if (!process.env.NOTION_API_KEY) missingVars.push('NOTION_API_KEY');
  if (!process.env.NOTION_DATABASE_ID) missingVars.push('NOTION_DATABASE_ID');
  if (!process.env.TMDB_API_KEY) missingVars.push('TMDB_API_KEY');
  
  if (missingVars.length > 0) {
    console.error('\x1b[31m‚ùå Faltan variables de entorno:\x1b[0m');
    missingVars.forEach(varName => {
      console.error(`   - ${varName}`);
    });
    console.error('\n\x1b[33müí° Aseg√∫rate de tener un archivo .env con:\x1b[0m');
    console.error('   NOTION_API_KEY=tu_token_notion');
    console.error('   NOTION_DATABASE_ID=tu_database_id');
    console.error('   TMDB_API_KEY=tu_tmdb_key');
    process.exit(1);
  }
}

(async () => {
  const startTime = Date.now();
  
  try {
    await validateEnvironment();
    
    // Obtener todas las p√°ginas de Notion (optimizado sin delays innecesarios)
    const pages = await getAllPages();
    const total = pages.length;
    let count = 0;
    const items = [];
    let tmdbRequestCount = 0;

    console.log(`\x1b[1m\x1b[36m  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\x1b[0m`);
    console.log(`\x1b[1m\x1b[36m  ‚ïë \x1b[33müìä Total de pel√≠culas encontradas: \x1b[1m\x1b[32m${total.toString().padStart(3, ' ')}\x1b[0m \x1b[1m\x1b[36m‚ïë\x1b[0m`);
    console.log(`\x1b[1m\x1b[36m  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\x1b[0m\n`);

    for (const page of pages) {
      count++;
      
      // Extraer datos de Notion
      const notionData = extractNotionData(page.properties);
      
      logProgress(count, total, `Procesando: ${notionData.titulo}`);

      // Obtener datos adicionales de TMDB solo si es necesario
      const tmdbId = notionData.tmdbUrl?.match(/\/movie\/(\d+)/)?.[1];
      let tmdbData = null;
      
      // Solo hacer request a TMDB si faltan datos importantes EN NOTION
      const needsTMDB = isEmpty(notionData.synopsis) || 
                       isEmpty(notionData.portada) || 
                       isEmpty(notionData.a√±o) || 
                       isEmpty(notionData.tituloOriginal) || 
                       isEmpty(notionData.directores);
      
      if (needsTMDB || tmdbId) {
        tmdbData = await fetchTMDBDetails(tmdbId, notionData.titulo);
        if (tmdbData) tmdbRequestCount++;
      }

      // Combinar datos con PRIORIDAD ABSOLUTA de Notion
      const finalData = mergeTMDBData(notionData, tmdbData);

      items.push({
        'T√≠tulo': finalData.titulo,
        'ID TMDB': finalData.tmdbId,
        'TMDB': finalData.tmdbUrl,
        'Synopsis': finalData.synopsis,
        'Portada': finalData.portada,
        'Carteles': finalData.carteles,
        'G√©neros': finalData.generos, // Solo desde Notion
        'A√±o': finalData.a√±o,
        'Duraci√≥n': finalData.duracion,
        'Puntuaci√≥n 1-10': finalData.puntuacion,
        'Trailer': finalData.trailer,
        'Ver Pel√≠cula': finalData.verPelicula,
        'Audios': finalData.audios,
        'Subt√≠tulos': finalData.subtitulos,
        'T√≠tulo original': finalData.tituloOriginal,
        'Productora(s)': finalData.productoras,
        'Idioma(s) original(es)': finalData.idiomas,
        'Pa√≠s(es)': finalData.paises,
        'Director(es)': finalData.directores,
        'Escritor(es)': finalData.escritores,
        'Reparto principal': finalData.reparto,
        'Categor√≠a': finalData.categoria,
        'Video iframe': finalData.videoIframe,
        'Video iframe 1': finalData.videoIframe1
      });
    }

    console.log('\n');
    
    const output = path.join(__dirname, 'public', 'data.json');
    
    const publicDir = path.join(__dirname, 'public');
    if (!fs.existsSync(publicDir)) {
      fs.mkdirSync(publicDir, { recursive: true });
    }
    
    fs.writeFileSync(output, JSON.stringify(items, null, 2));
    
    const endTime = Date.now();
    const executionTime = Math.round((endTime - startTime) / 1000);
    const minutes = Math.floor(executionTime / 60);
    const seconds = executionTime % 60;
    const timeString = minutes > 0 ? `${minutes}m ${seconds}s` : `${seconds}s`;
    
    console.log('\n');
    console.log('\x1b[1m\x1b[36m  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\x1b[0m');
    console.log('\x1b[1m\x1b[36m  ‚ïë                      \x1b[1m\x1b[33müé¨ PROCESO COMPLETADO üé¨\x1b[1m\x1b[36m                     ‚ïë\x1b[0m');
    console.log('\x1b[1m\x1b[36m  ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\x1b[0m');
    console.log('\x1b[1m\x1b[36m  ‚ïë                                                              ‚ïë\x1b[0m');
    console.log(`\x1b[1m\x1b[36m  ‚ïë  \x1b[32m‚úÖ Archivo actualizado:\x1b[0m \x1b[1m\x1b[37mdata.json\x1b[0m                         \x1b[1m\x1b[36m‚ïë\x1b[0m`);
    console.log('\x1b[1m\x1b[36m  ‚ïë                                                              ‚ïë\x1b[0m');
    console.log(`\x1b[1m\x1b[36m  ‚ïë  \x1b[35müìÅ Ubicaci√≥n:\x1b[0m                                            \x1b[1m\x1b[36m‚ïë\x1b[0m`);
    console.log(`\x1b[1m\x1b[36m  ‚ïë     \x1b[2m\x1b[37m${output.padEnd(53, ' ')}\x1b[0m \x1b[1m\x1b[36m‚ïë\x1b[0m`);
    console.log('\x1b[1m\x1b[36m  ‚ïë                                                              ‚ïë\x1b[0m');
    console.log(`\x1b[1m\x1b[36m  ‚ïë  \x1b[33müìä Total procesadas:\x1b[0m \x1b[1m\x1b[32m${items.length.toString().padStart(3, ' ')}\x1b[0m \x1b[33mpel√≠culas\x1b[0m                   \x1b[1m\x1b[36m‚ïë\x1b[0m`);
    console.log('\x1b[1m\x1b[36m  ‚ïë                                                              ‚ïë\x1b[0m');
    console.log(`\x1b[1m\x1b[36m  ‚ïë  \x1b[35m‚è±Ô∏è  Tiempo ejecuci√≥n:\x1b[0m \x1b[1m\x1b[36m${timeString.padStart(8, ' ')}\x1b[0m                        \x1b[1m\x1b[36m‚ïë\x1b[0m`);
    console.log('\x1b[1m\x1b[36m  ‚ïë                                                              ‚ïë\x1b[0m');
    console.log(`\x1b[1m\x1b[36m  ‚ïë  \x1b[37müïí Completado:\x1b[0m \x1b[2m\x1b[37m${now()}\x1b[0m                            \x1b[1m\x1b[36m‚ïë\x1b[0m`);
    console.log('\x1b[1m\x1b[36m  ‚ïë                                                              ‚ïë\x1b[0m');
    console.log(`\x1b[1m\x1b[36m  ‚ïë  \x1b[36müí° Requests TMDB:\x1b[0m \x1b[1m\x1b[35m${tmdbRequestCount}\x1b[0m \x1b[35m/ ${tmdbCache.size} en cache\x1b[0m            \x1b[1m\x1b[36m‚ïë\x1b[0m`);
    console.log(`\x1b[1m\x1b[36m  ‚ïë  \x1b[32müéØ Prioridad Notion:\x1b[0m \x1b[1m\x1b[32mACTIVA\x1b[0m                           \x1b[1m\x1b[36m‚ïë\x1b[0m`);
    console.log('\x1b[1m\x1b[36m  ‚ïë                                                              ‚ïë\x1b[0m');
    console.log('\x1b[1m\x1b[36m  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\x1b[0m');
    console.log('\n');
    
  } catch (error) {
    console.error('\n\x1b[31m‚ùå Error durante la ejecuci√≥n:\x1b[0m');
    console.error(error.message);
    
    if (error.code === 'unauthorized') {
      console.error('\n\x1b[33müí° Posibles soluciones:\x1b[0m');
      console.error('   1. Verifica tu NOTION_API_KEY en el archivo .env');
      console.error('   2. Aseg√∫rate de que la integraci√≥n est√© conectada a la base de datos');
      console.error('   3. Verifica que el NOTION_DATABASE_ID sea correcto');
    }
    
    process.exit(1);
  }
})();